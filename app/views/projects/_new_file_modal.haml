%form#new_file_modal.modal
  %h3 New File

  = label_tag "Choose Type"

  :ruby
    choices = [
      ["Script",
        {:type => "text", :directory => "source", :ext => "coffee", :lang => "coffeescript"},
        {}
      ],
      ["Test",
        {:type => "text", :directory => "test", :ext => "coffee", :lang => "coffeescript"},
        {}
      ],
      ["Image",
        {:type => "image", :directory => "images", :ext => "png"},
        {:width => 32, :height => 32}
      ],
      ["Sound",
        {:type => "sound", :directory => "sounds", :ext => "sfs"},
        {}
      ],
      ["Tilemap",
        {:type => "tilemap", :directory => "tilemaps", :ext => "tilemap"},
        {:tilesWide => 15, :tilesTall => 10, :tileWidth => 32, :tileHeight => 32}
      ],
      ["Animation",
        {:type => "animation", :directory => "data", :ext => "animation"},
        {}
      ]
    ]

  - choices.each do |choice, params, fields|
    %button.choice{ 'data-params' => params.to_json, 'data-fields' => fields.to_json }= choice

  .field.template
    %label
      ${name}
      %input(type="text" name="options[${name}]" title="${name}" value="${value}")

  .details{:style => "display: none;"}
    %label
      Name
      = text_field_tag :name, "", {:title => 'Name', :id => nil}

    .fields

    %button.create Create

= render :partial => "file_template"

:coffeescript
  params = null

  window.findDirectory = (directoryPath) ->
    folderPaths = directoryPath.split("/")

    dirNode = $("ul.filetree")

    folderPaths.each (dirName) ->
      dirNode = dirNode.children("[title=\#{dirName}]").children("ul")

    dirNode

  window.newFileNode = (inputData) ->
    unless inputData.name
      alert "You need to enter a name!"
      return

    # Create/traverse directories
    path = inputData.path
    folderPaths = path.split("/")
    addedTreeRoot = null

    dirNode = $("ul.filetree")
    folderPaths.each (dirName) ->
      dirNode = (if (dir = dirNode.children("[title=\#{dirName}]")).length
        dir.eq(0)
      else
        newDir = $("#directory_template").tmpl(name: dirName).appendTo(dirNode)
        addedTreeRoot ||= newDir

        newDir
      ).children('ul')

    inputData.name = "\#{inputData.name}.\#{inputData.ext}"
    inputData.path = "/\#{inputData.path}/\#{inputData.name}"
    inputData.options = JSON.stringify(inputData.options)
    dataId = "file_" + inputData.path.replace(/[^A-Za-z0-9_-]/g, "_")

    data = $.extend({
      dataId: dataId
      displayName: inputData.name
    }, inputData)

    treeNode = $("#file_template").tmpl(data).appendTo(dirNode)

    unless inputData.noAutoOpen
      treeNode.find(".file").click()

    if inputData.forceSave
      window.save null,
        contents: inputData.contents
        path: inputData.path
        noNotify: true

    return treeNode

  $("#new_file_modal button.choice").live 'click', (event) ->
    event.preventDefault()

    $(this).takeClass("active")

    $("#new_file_modal .details").show()

    params = $(this).data('params')
    params.path = projectConfig.directories[params.directory]

    fields = $("#new_file_modal .fields").empty()

    for name, value of $(this).data('fields')
      $("#new_file_modal .field.template").tmpl(
        name: name
        value: value
      ).appendTo(fields)

  $("#new_file_modal button.create").live 'click', (event) ->
    event.preventDefault()

    formData = $("#new_file_modal").serializeObject()

    newNode = newFileNode($.extend(formData, params))

    if newNode
      $.modal.close()
