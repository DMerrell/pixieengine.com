= render :partial => "actions"

#content
  #error

  .sidebar_container
    .relative
      .sidebar
        %h3.project_name= project.display_name
        %ul.filetree
          - unless project.file_info.nil?
            - project.file_info[:files].each do |file|
              = render :partial => "file_tree_node", :locals => {:file_info => file}
      .bottom.actionable
        .featured_action
          %h3 Package App for Chrome Web Store
          .static-chrome_webstore

  %section
    #tabs.module
      %ul

  #test_zone.window(style="top: 125px; left: 300px;")
    %span#close_app.ui-icon.ui-icon-close
    %h3.ui-widget-header= project.title
    %iframe#test_frame

  #unit_test_window.window(style="top: 100px; left: 200px;")
    %span.ui-icon.ui-icon-close
    %h3.ui-widget-header Test #{project.title}
    %iframe#unit_test_frame

= render :partial => "context_menu"
= render :partial => "tips"
= render :partial => "export_modal"
= render :partial => "new_file_modal"
= render :partial => "file_upload"
= render :partial => "shared/hotkeys"

- content_for :javascript do
  = javascript_include_tag "ide/base"

- project_id = params[:id]

- content_for :javascript do
  :coffeescript
    window.sessionFlashVars = "authenticity_token=#{u form_authenticity_token}&#{session_key_name}=#{u cookies[session_key_name]}"

    $("#content .sidebar_container .bottom").click ->
      requireSubscription ->
        notify("Exporting Chrome Web Store Package ...")

        window.location = #{download_project_path(project, :chrome => 1).to_json}

        $.modal.close()

    window.projectId = #{project_id.to_json}

    window.compileDirectory = (directoryPath) ->
      findDirectory(directoryPath).find("span.file").map((index, span) ->
        compileFileNode($(span))
      ).get().join(";\n")

    window.compileFileNode = (node) ->
      $element = $(node.attr("data-id"))
      src = $element.find("[name=contents]").val()
      ext = $element.data("ext")

      compileCode(src, ext, $element)

    window.compileCode = (src, ext, $element) ->
      if ext == "js"
        src
      else if ext == "coffee"
        try
          compiledCode = CoffeeScript.compile src, bare: true
        catch error
          if $element
            displayError
              file: $element.data("path")
              fileId: "#" + $element.attr("id")
              message: error.message
          else
            displayError
              message: error.message

        compiledCode

    window.runCodeInIframe = (code, iframe) ->
      contentWindow = iframe.get(0).contentWindow
      sandbox = contentWindow.document
      sandbox.open()
      sandbox.write(#{stylesheet_link_tag('project').to_json})
      sandbox.write(#{javascript_include_tag("http://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js").to_json.gsub('/', '\\/')})

      sandbox.write("<canvas width='\#{projectConfig.width}' height='\#{projectConfig.height}'></canvas>")

      sandbox.write("<script>\#{code}<\/script>")

      sandbox.close()

      contentWindow.focus()

    window.testCodeInIframe = (code, iframe) ->
      contentWindow = iframe.get(0).contentWindow
      sandbox = contentWindow.document
      sandbox.open()
      sandbox.write(#{stylesheet_link_tag('project').to_json})
      sandbox.write(#{stylesheet_link_tag('qunit').to_json})
      sandbox.write(#{javascript_include_tag("http://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js").to_json.gsub('/', '\\/')})
      sandbox.write(#{javascript_include_tag("qunit").to_json.gsub('/', '\\/')})

      sandbox.write($.tmpl("ide/qunit").html())

      sandbox.write("<script>\#{code}<\/script>")

      sandbox.close()

    window.log = (message) ->
      console.log message

    window.openFile = (docSelector) ->
      tabData = $(docSelector)

      if tabData.data("type") == "binary"
        alert "Can't edit binary data... maybe there is a source file that can be edited?"
        return
      if tabData.data("size") > #{Project::MAX_EDITOR_FILE_SIZE}
        alert "This file is too large for our editor!"
        return

      if $('#tabs ul li a[href="' + docSelector + '"]').length
        $('#tabs ul li a[href="' + docSelector + '"]').click()
      else
        unless name = tabData.data("name")
          path = tabData.data("path")
          if match = path.match /\/([^\/]*)$/
            name = match[1]
          else
            name = path

        $("#tabs").tabs 'add', docSelector, name.withoutExtension(), 0

    window.onbeforeunload = ->
      if $("li.unsaved").length
        "You have some unsaved changes, if you leave now you will lose your work."

    window.loadProjectConfig = ->
      DEFAULT_CONFIG = #{default_project_config.to_json}
      try
        window.projectConfig = JSON.parse($("[data-path='pixie.json']").find("[name=contents]").val())
      catch e
        console.warn?(e)
        window.projectConfig = {}
      finally
        # Merge in default configs
        window.projectConfig = $.extend(true, {}, DEFAULT_CONFIG, window.projectConfig)

    # Tree and Tabs setup
    $ ->
      window.loadProjectConfig()

      window.entities = {}
      # Populate entities
      $('ul.filetree [data-type=entity]').each ->
        $this = $(this)
        fileNode = $this.prev()

        uuid = fileNode.text().replace(/\.[^\.]*$/, '')
        entityData = $this.find("[name=contents]").text().parse()

        if name = entityData.name
          fileNode.text(name)
          $this.attr('data-name', name)
          $this.attr('data-uuid', uuid)

        window.entities[uuid] = entityData

      $('ul.filetree').treeview()

      $tabs = $('#tabs').tabs
        add: (event, ui) ->
          $tabs.tabs('select', '#' + ui.panel.id)

          if fileData = createEditor(ui)
            $(ui.tab).data('updateSaved', fileData.updateSaved)
            $(ui.tab).data('doSave', fileData.doSave)
            $(ui.tab).parent().find('span.lang').addClass(fileData.cssClass)

          window.currentPanel = ui.panel

        remove: (event, ui) ->
          $(ui.panel).find(".CodeMirror-wrapping").remove()
          $('.filetree').append(ui.panel)

        select: (event, ui) ->
          window.currentPanel = ui.panel

        tabTemplate: '<li><span class="ui-icon ui-icon-close"></span><span class="ui-icon lang"></span><a href="#' + '{href}">#' + '{label}</a></li>'

      $tabs
        .find(".ui-tabs-nav")
        .sortable
          axis: "x"

      $('.filetree .file').live 'click', ->
        openFile($(this).data('id'))

        trackEvent("IDE", "open file", $(this).data('id'))

      $('.filetree .folder').live 'click', ->
        trackEvent("IDE", "click folder", $(this).text())

      $('.error.file').live 'click', ->
        if id = $(this).data('id')
          openFile(id)

      $('#tabs span.ui-icon-close').live 'click', ->
        parent = $(this).parent()

        if !parent.hasClass("unsaved") || confirm("You are about to close an unsaved file, continue?")
          index = $('li', $tabs).index(parent)
          $tabs.tabs('remove', index)

      $('#tabs span.ui-icon.lang').live 'click', ->
        parent = $(this).parent()
        index = $('li', $tabs).index(parent)
        $tabs.tabs('select', index)

      $('#test_zone .ui-icon-close').live "click", ->
        clearErrorMessages()

      # Hack to pre-load main file, README and tutorials
      $("#file_src_main_coffee").prev().click()
      $("#file_README").prev().click()
      $("#tutorial").prev().click()

      $('#update_libs, #generate_docs, #build, #tag, #export').tipsy
        delayIn: 500
        delayOut: 500
        fade: 50
        gravity: 'n'
