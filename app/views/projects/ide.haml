%nav.top.actions
  %button#save Save
  %button#new New
  %button#run Run
  %button#publish Publish

#content
  #error

  %nav.left
    %ul.filetree
      - project.file_info[:files].each do |file|
        = render :partial => "file_tree_node", :locals => {:file_info => file}

  %section
    #tabs
      %ul

  #test_zone(style="top: 300px; left: 50px;")
    %span#close_app.ui-icon.ui-icon-close
    %h3.ui-widget-header= project.title
    %iframe#test_frame

= render :partial => "pixie"
= render :partial => "sfxr"
= render :partial => "new_file_modal"

:coffeescript
  window.compileCoffee = (src) ->
    CoffeeScript.compile src, noWrap: true

  window.log = (message) ->
    console.log message

  # Commands
  window.save = (event, data) ->
    notify "Saving..."

    activeTab = $("#tabs ul li.ui-state-active")

    successCallback = (data) ->
      notify "Saved!"

      # Check for update saved method
      activeTab.find('a').data('updateSaved')?()

      activeTab.removeClass("unsaved")

    if data
      postData = $.extend({format: 'json'}, data)

      $.post '/projects/#{project.id}/save_file', postData, successCallback

    else
      form = $(currentPanel).find('form')

      if form.length
        form.ajaxSubmit
          type: 'POST'
          dataType: "json"
          success: successCallback

        # Hot swap: inject code
        if projectConfig.hotSwap
          src = $(currentPanel).find("[name=contents]").val()
          ext = $(currentPanel).data("ext")

          if ext == "coffee"
            code = compileCoffee(src)
          else if ext = "js"
            code = src

          if code && (runningGameFrame = $("#test_frame").get(0)?.contentWindow)
            try
              runningGameFrame.eval(code)
            catch error
              warn? error.message

            try
              runningGameFrame.eval("engine.reload()")
            catch error
              warn? error.message
      else
        # Check for special save method
        activeTab.find('a').data('doSave')?()

  $('#save').live 'click', save

  newFileModal = () ->
    $("#new_file_modal").modal()

  $("#new").live 'click', newFileModal

  runApp = () ->
    width = projectConfig.width
    height = projectConfig.height

    $("#test_frame").remove()

    iframe = $ '<iframe />'
      height: height
      id: "test_frame"
      width: width

    zone = $("#test_zone")
    zone.append(iframe).show()

    if runPath = projectConfig.runPath
      iframe.attr("src", "/production/projects/#{project.id}/\#{runPath}")
    else
      #TODO: Gather compiled code
      errors = []

      compileNode = (node) ->
        ext = node.attr("data-ext")

        if ext == "js"
          node.find("[name=contents]").val()
        else if ext == "coffee"
          try
            compiledCode = CoffeeScript.compile node.find("[name=contents]").val(), noWrap: true
          catch error
            errors.push error.message

          compiledCode

      srcDir = findDirectory(projectConfig.directories.source)

      compiledCode = srcDir.find("span.file").map((index, span) ->
        $span = $(span)

        # Save main for last
        return if $span.parent().parent()[0] == srcDir[0] && $span.parent().attr("title") == projectConfig.main

        $element = $($span.attr("data-id"))

        compileNode($element)
      ).get()

      mainCode = compileNode($(srcDir.children("[title=\#{projectConfig.main}]").find("span.file").data('id')))

      libCode = findDirectory(projectConfig.directories.lib).find("span.file").map((index, span) ->
        $($(span).attr("data-id")).find("[name=contents]").val()
      ).get()

      crammedCode = CoffeeScript.compile "App = {}", noWrap: true

      crammedCode += libCode.join(";\n") + compiledCode.join(";\n")

      if projectConfig.wrapMain
        crammedCode += ";$(function(){ \#{mainCode} });"
      else
        crammedCode += ";" + mainCode

      # Cram compiled code in iframe

      contentWindow = iframe.get(0).contentWindow
      sandbox = contentWindow.document
      sandbox.write(#{stylesheet_link_tag('app.css').to_json});
      sandbox.write(#{stylesheet_link_tag('screen.css').to_json});
      sandbox.write(#{javascript_include_tag("http://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js").to_json.gsub('/', '\\/')});

      sandbox.write("<canvas width='\#{width}' height='\#{height}'></canvas>")

      script = document.createElement 'script'
      script.text = crammedCode

      sandbox.body.appendChild(script)

      sandbox.close()

  $("#run").live 'click', runApp

  # key combos like ctrl+s
  ctrlKeys =
    s: save
    #TODO Fix => n: newFileModal

  bindKeys = (scopeDocument, ctrlKeys) ->
    $.each ctrlKeys, (key, fn) ->
      $(scopeDocument).bind('keydown', "ctrl+\#{key} meta+\#{key}", (event) ->
        event.preventDefault()
        fn()
      )

  bindKeys(document, ctrlKeys)

  window.createEditor = (ui) ->
    panel = $(ui.panel)
    tab = $(ui.tab)
    path = panel.attr('data-path')
    lang = panel.attr('data-lang')
    type = panel.attr('data-type')
    mtime = panel.attr('data-mtime')

    if type == "text"
      textArea = panel.find('textarea').get(0)
      savedCode = textArea.value

      if lang == "html"
        lang = "xml"

      lang ||= "dummy"

      editor = new CodeMirror.fromTextArea textArea,
        autoMatchParens: true
        content: savedCode
        height: "100%"
        lineNumbers: true
        parserfile: ["tokenize_" + lang + ".js", "parse_" + lang + ".js"]
        path: "/javascripts/codemirror/"
        stylesheet: ["/stylesheets/codemirror/main.css"]
        tabMode: "shift"
        textWrapping: false

      $(editor.win.document).find('html').toggleClass('light', $("#bulb").hasClass('on'))

      bindKeys(editor.win.document, ctrlKeys)

      # Listen for keypresses and update contents.
      $(editor.win.document).keyup ->
        currentCode = editor.getCode()

        if currentCode != savedCode
          tab.parent().addClass("unsaved")
        else
          tab.parent().removeClass("unsaved")

        textArea.value = currentCode

      cssClass: lang
      updateSaved: () ->
        savedCode = editor.getCode()

    else if type == "image"
      pixelEditor = createPixelEditor
        width: 32 #TODO: Real width
        height: 32 #TODO: Real height
        dataUrl: "/production/projects/#{project.id}\#{path}?\#{mtime}"
        path: path

      pixelEditor.bind('save', save)

      panel.empty().append(pixelEditor)

      cssClass: "sprite"
      updateSaved: () -> #TODO
      doSave: () ->
        pixelEditor.trigger('doSave')

    else if type == "sound"
      contentsField = panel.find('[name=contents]')
      soundData = contentsField.val()
      hiddenContentsField = $ "<input />",
        name: "contents"
        type: "hidden"
        val: soundData

      soundEditor = createSoundEditor
        soundData: soundData
        path: path

      soundEditor.bind('save', save)

      panel.empty().append(soundEditor, hiddenContentsField)

      cssClass: type
      doSave: () ->
        soundEditor.trigger('doSave')

    else if type == "tilemap"
      #TODO Tilemap Editor embed

      cssClass: type
      updateSaved: () -> #TODO

  # Tree and Tabs setup
  $ ->
    DEFAULT_CONFIG = #{default_project_config.to_json}
    try
      window.projectConfig = JSON.parse($("[data-path=/pixie.json]").find("[name=contents]").val())
    catch e
      console.warn?(e)
      window.projectConfig = {}
    finally
      # Merge in default configs
      window.projectConfig = $.extend(true, {}, DEFAULT_CONFIG, window.projectConfig)

    $('ul.filetree').treeview()

    $tabs = $('#tabs').tabs
      add: (event, ui) ->
        $tabs.tabs('select', '#' + ui.panel.id)

        if fileData = createEditor(ui)
          $(ui.tab).data('updateSaved', fileData.updateSaved)
          $(ui.tab).data('doSave', fileData.doSave)
          $(ui.tab).parent().find('span.lang').addClass(fileData.cssClass)

        window.currentPanel = ui.panel

      remove: (event, ui) ->
        $(ui.panel).find(".CodeMirror-wrapping").remove()
        $('.filetree').append(ui.panel)

      select: (event, ui) ->
        window.currentPanel = ui.panel

      tabTemplate: '<li><span class="ui-icon ui-icon-close"></span><span class="ui-icon lang"></span><a href="#' + '{href}">#' + '{label}</a></li>'

    $('.filetree .file').live 'click', ->
      docSelector = $(this).data('id')

      if $(docSelector).data("type") == "binary"
        alert "Can't edit binary data... maybe there is a source file that can be edited?"
        return

      if $('#tabs ul li a[href="' + docSelector + '"]').length
        $('#tabs ul li a[href="' + docSelector + '"]').click()
      else
        $tabs.tabs 'add', docSelector, $(this).text(), 0

    $('#tabs span.ui-icon-close').live 'click', ->
      parent = $(this).parent()

      if !parent.hasClass("unsaved") || confirm("You are about to close an unsaved file, continue?")
        index = $('li', $tabs).index(parent)
        $tabs.tabs('remove', index)

    $("#test_zone").draggable(
      handle: "h3"
      iframeFix: true
    ).disableSelection()

    closeApp = ->
      $("#test_zone").hide()
      $("#test_frame").remove()

    $('#close_app').click ->
      closeApp()
