= render :partial => "actions"

#content
  #error

  .sidebar_container
    .sidebar
      %h3.project_name= project.display_name

  %section
    #tabs.module
      %ul

  #unit_test_window.window(style="top: 100px; left: 200px;")
    %span.ui-icon.ui-icon-close
    %h3.ui-widget-header Test #{project.title}
    %iframe#unit_test_frame

= render :partial => "tips"
= render :partial => "export_modal"
= render :partial => "new_file_modal"
= render :partial => "file_upload"
= render :partial => "shared/hotkeys"

- content_for :javascript do
  = javascript_include_tag "ide/base"
  = javascript_include_tag "bone_tree"

- project_id = params[:id]

%textarea#code_content(style="display:none;")= project.file_info.to_json

- content_for :javascript do
  :coffeescript
    window.tree = new BoneTree.Views.Tree

    fileTreeData = JSON.parse($('#code_content').val())

    tree.addFromJSON fileTreeData, ''

    tree.closeDirectories()

    tree.file "Documentation.documentation",
      type: "documentation"

    tree.bind 'openFile', (file) ->
      openFile(file)

    tree.bind 'rename', (file, newName) ->
      {docSelector, extension, language, name, nodeType, path, type} = file.attributes

      openedTab = $('#tabs ul li a[href="' + docSelector + '"]').parent()

      # Abort if unsaved
      if openedTab.is(".unsaved")
        notify "Save \#{file.nameWithExtension()} before renaming"
        return
      else
        openedTab.find(".ui-icon-close").click()

      oldExtension = file.previous('extension')
      oldExtension = "." + oldExtension if oldExtension isnt ""

      # this works because we are secretly inside a change event
      oldName = file.previous('name') + oldExtension

      # TODO: This is broken for files whose names are a subset of the prior path
      # ex. boobaz/boo
      newPath = path.replace(oldName, newName)
      oldPath = path

      # docSelector will be auto-updated when opening files, so I think no need to set here
      file.set
        path: newPath
        _path: newPath # TODO: Find out why there is an _path

      postData =
        path: oldPath
        new_path: newPath
        format: 'json'
        message: $(".actions .status .message").val()

      $.post "/projects/\#{projectId}/rename_file", postData, -> # Assuming success
      notify "Renamed \#{oldName} => \#{newName}"

      # Close and reopen file if open
      if openedTab.length
        openFile(file)

    tree.bind 'remove', (file) ->
      notify "Removing \#{file.nameWithExtension()}..."

      docSelector = file.get('docSelector')

      # Close the tab if open
      $('#tabs ul li a[href="' + docSelector + '"]').parent().find(".ui-icon-close").click()

      path = file.get('path')
      message = $(".actions .status .message").val()

      postData =
        path: path
        format: 'json'
        message: message

      successCallback = (data) ->
        notify "\#{file.nameWithExtension()} removed!"

      $.post "/projects/\#{projectId}/remove_file", postData, successCallback

    $('.sidebar').append(tree.render().$el)

    window.sessionFlashVars = "authenticity_token=#{u form_authenticity_token}&#{session_key_name}=#{u cookies[session_key_name]}"
    window.projectId = #{project_id.to_json}

    $("#content .sidebar_container .bottom").click ->
      requireSubscription ->
        notify("Exporting Chrome Web Store Package ...")

        window.location = #{download_project_path(project, :chrome => 1).to_json}

        $.modal.close()

    window.compileDirectory = (directoryPath) ->
      findDirectory(directoryPath).map((file) ->
        compileFileNode(file)
      ).join(";\n")

    window.compileFileNode = (file) ->
      {contents, extension} = file.attributes

      $element = $(file.get('docSelector'))

      compileCode(contents, extension, $element)

    window.compileCode = (src, ext, $element) ->
      if ext is "js"
        src
      else if ext is "coffee"
        try
          compiledCode = CoffeeScript.compile src, bare: true
        catch error
          if $element
            displayError
              file: $element.data("path")
              fileId: "#" + $element.attr("id")
              message: error.message
          else
            displayError
              message: error.message

        compiledCode

    window.runCodeInWindow = (code, contentWindow) ->
      sandbox = contentWindow.document
      sandbox.open()
      sandbox.write(#{stylesheet_link_tag('project').to_json})
      sandbox.write(#{javascript_include_tag("http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js").to_json.gsub('/', '\\/')})

      sandbox.write("<canvas width='\#{projectConfig.width}' height='\#{projectConfig.height}'></canvas>")

      sandbox.write("<script>\#{code}<\/script>")

      sandbox.close()

      contentWindow.focus()

    window.testCodeInWindow = (code, contentWindow) ->
      sandbox = contentWindow.document
      sandbox.open()
      sandbox.write(#{stylesheet_link_tag('project').to_json})
      sandbox.write(#{stylesheet_link_tag('qunit').to_json})
      sandbox.write(#{javascript_include_tag("http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js").to_json.gsub('/', '\\/')})
      sandbox.write(#{javascript_include_tag("qunit").to_json.gsub('/', '\\/')})

      sandbox.write($(JST["templates/ide/qunit"]()).html())

      sandbox.write("<script>\#{code}<\/script>")

      sandbox.close()

    window.log = (message) ->
      console.log message

    window.openFile = (file) ->
      trackEvent("IDE", "open file", file)

      {name, nodeType, type, path, size} = file.attributes
      selector = path.replace(/[^A-Za-z0-9_-]/g, "_")

      # TODO: Have docSelector be a generated attribute or method on files
      # In the meantime reset it every time we open to keep it correct.
      # TOOD: Dump jQueryUI Tabs and get rid of doc selector entirely
      docSelector = file.attributes.docSelector = '#' + nodeType + '_' + selector

      return alert "Can't edit binary data... maybe there is a source file that can be edited." if type is "binary"
      return alert "This file is too large for our editor!" if size > #{Project::MAX_EDITOR_FILE_SIZE}

      # focus the tab if it already exists
      if (tab = $('#tabs ul li a[href="' + docSelector + '"]')).length
        tab.click()
      else
        unless fileName = name
          if match = path.match /\/([^\/]*)$/
            fileName = match[1]
          else
            fileName = path

        window.currentFile = file

        $("#tabs").tabs 'add', docSelector, fileName, 0

        # Focus Newly Created Tab
        $('#tabs ul li a[href="' + docSelector + '"]').click()

    window.onbeforeunload = ->
      if $("li.unsaved").length
        "You have some unsaved changes, if you leave now you will lose your work."

    window.loadProjectConfig = ->
      DEFAULT_CONFIG = #{default_project_config.to_json}
      try
        window.projectConfig = JSON.parse(tree.file('pixie.json').get('contents'))
      catch e
        console.warn?(e)
        window.projectConfig = {}
      finally
        # Merge in default configs
        window.projectConfig = $.extend(true, {}, DEFAULT_CONFIG, window.projectConfig)

    # Autosave hack
    setInterval ->
      # Check project config autosave flag
      if projectConfig?.autosave
        unsavedTabs = $("#tabs ul li.unsaved")

        # TODO: Possibly refactor into a 'save all unsaved tabs'
        # this is slightly different than regular save because
        # regular save has a hack to save the current tab if no unsaved tabs
        # as a workaround for the sfx editor not setting dirty state correctly.
        if unsavedTabs.length
          # Save each unsaved tab
          unsavedTabs.each ->
            $(this).find('a').data('doSave')?()
    , 5000

    # Tree and Tabs setup
    $ ->
      window.loadProjectConfig()

      $tabs = $('#tabs').tabs
        add: (event, ui) ->
          {contents, docSelector, type} = currentFile.attributes

          if type is 'documentation'
            #{doc_id = admin? ? project.id : Project::DOCS_ID}
            $(ui.panel).append "<iframe class='no_border' src='/production/projects/#{doc_id}/docs/index.html' width='100%' height='100%'></iframe>"
            $(ui.tab).parent().find('span.lang').addClass(type)
          else if type is 'tutorial'
            $(ui.panel).append "<iframe class='no_border' src='\#{contents}' width='100%' height='100%'></iframe>"
            $(ui.tab).parent().find('span.lang').addClass(type)
          else if fileData = createEditor(ui)
            $(ui.tab).data('updateSaved', fileData.updateSaved)
            $(ui.tab).data('doSave', fileData.doSave)
            $(ui.tab).parent().find('span.lang').addClass(fileData.cssClass)

          window.currentPanel = ui.panel
          $tabs.tabs('select', docSelector)
          $('#tabs ul li a[href="' + docSelector + '"]').click()

        select: (event, ui) ->
          window.currentPanel = ui.panel

          if editor = $(ui.panel).data "editor"
            window.currentComponent = editor

          textEditor = $(ui.panel).data("textEditor")

          setTimeout ->
            textEditor.focus() if textEditor
          , 0

        tabTemplate: '<li><span class="ui-icon ui-icon-close"></span><span class="ui-icon lang"></span><a href="#' + '{href}">#' + '{label}</a></li>'

      $('.filetree .folder').live 'click', ->
        trackEvent("IDE", "click folder", $(this).text())

      $('.error.file').live 'click', ->
        if id = $(this).data('id')
          openFile(id)

      $('#tabs span.ui-icon-close').live 'click', ->
        parent = $(this).parent()

        if not parent.hasClass("unsaved") or confirm("You are about to close an unsaved file, continue?")
          index = $('li', $tabs).index(parent)
          $tabs.tabs('remove', index)

      $('#tabs span.ui-icon.lang').live 'click', ->
        parent = $(this).parent()
        index = $('li', $tabs).index(parent)
        $tabs.tabs('select', index)

      # Hack to pre-load main file, README and tutorials
      for fileName in ['src/main.coffee', 'src/main.js', 'README', 'Tutorial.tutorial']
        if file = tree.file(fileName)
          tree.trigger 'openFile', file

      $('#update_libs, #generate_docs, #build, #tag, #export').tipsy
        delayIn: 500
        delayOut: 500
        fade: 50
        gravity: 'n'
