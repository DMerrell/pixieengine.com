- content_for :javascript do
  :coffeescript
    # TODO: Move this into it's own file like the other IDE/Editor components
    createTextEditor = (options) ->
      {path, panel, lang, tab} = options

      textArea = panel.find('textarea').get(0)
      savedCode = textArea.value

      if lang == "html"
        lang = "xml"

      lang ||= "dummy"

      editor = new CodeMirror.fromTextArea textArea,
        autoMatchParens: true
        content: savedCode
        height: "100%"
        lineNumbers: true
        parserfile: ["tokenize_" + lang + ".js", "parse_" + lang + ".js"]
        path: "/assets/codemirror/"
        stylesheet: ["/assets/codemirror/main.css"]
        tabMode: "shift"
        textWrapping: false

      $editor = $(editor)

      # Match the current theme
      $(editor.win.document).find('html').toggleClass('light', $(".bulb-sprite").hasClass('static-on'))

      # Bind all the page hotkeys to work when triggered from the editor iframe
      bindKeys(editor.win.document, hotKeys)

      # Listen for keypresses and update contents.
      $(editor.win.document).keyup ->
        currentCode = editor.getCode()

        if currentCode != savedCode
          $editor.trigger('dirty')
        else
          $editor.trigger('clean')

        textArea.value = currentCode

      $editor.bind "save", ->
        codeToSave = editor.getCode()

        saveFile
          contents: codeToSave
          path: path
          success: ->
            # Editor's state may have changed during ajax call
            if editor.getCode() == codeToSave
              $editor.trigger "clean"
            else
              $editor.trigger "dirty"

            savedCode = codeToSave

      return $editor

    window.createEditor = (ui) ->
      panel = $(ui.panel)
      tab = $(ui.tab)
      data = panel.data()
      data.panel = panel
      {type, lang} = data

      if type == "text"
        editor = createTextEditor data

      else if type == "json"
        editor = createJsonEditor data

      else if type == "entity"
        editor = createEntityEditor data

      else if type == "image"
        editor = createPixelEditor data

      else if type == "animation"
        editor = createAnimationEditor data

      else if type == "tilemap"
        editor = createTileEditor data

      else if type == "sound"
        editor = createSoundEditor data

      else if type == "documentation" || type == "tutorial"
        # These just open up info tabs
        return {
          cssClass: type
        }

      if editor
        editor.bind 'clean', ->
          tab.parent().removeClass("unsaved")
        editor.bind 'change dirty', ->
          tab.parent().addClass("unsaved")

        cssClass: lang
        doSave: () ->
          editor.trigger('save')
