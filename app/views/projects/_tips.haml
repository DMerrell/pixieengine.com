#tips{:style => "display: none;"}
  - if project.id == Project::ASTEROIDS_DEMO_ID
    .tip
      .text
        Welcome to our Asteroids tutorial! Click the 'next' arrow to the right to get familiar with the tools.
    .tip{ 'data-element_selector' => ".filetree > li[title='src']", 'data-code' => "$('#file_src_wrappable_coffee').prev().click()" }
      .text
        Here is the
        %b wrappable
        module. Modules make it easy to define behaviors concisely.
    .tip{ 'data-element_selector' => ".filetree > li[title='src']", 'data-code' => "$('#file_src_base_coffee').prev().click()" }
      .text
        Define a base class if you notice repeated behavior across many classes.
    .tip{ 'data-element_selector' => ".filetree > li[title='sounds']", 'data-code' => "$('#file_sounds_pew_sfs').prev().click()" }
      .text
        We use sfxr to make our sounds effects. Tweak the inputs to change the way the shot sounds.
    .tip{ 'data-element_selector' => ".filetree > li[title='animations']", 'data-code' => "$('#file_animations_ship_animation').prev().click()" }
      .text
        Select the
        %b explode
        action. Click on the last frame and you will see that it has the tag 'explode' to fire that event when the frame is reached.
    .tip{ 'data-element_selector' => ".filetree > li[title='images']", 'data-code' => "$('.filetree > li[title=\"images\"]').effect('highlight', {}, 5000);" }
      .text
        The sprite assets in your game are stored here in images. Click
        %b New -> Image
        to make your own or
        %b Import
        to drag one from your computer.
  - elsif project.id == Project::DEMO_ID
    .tip
      .text
        Welcome to
        = link_to "condor's", User.find(4)
        three part platforming demo. Part one is going to cover keyboard input.
    .tip{ 'data-code' => "$('[data-path=\"src/main.coffee\"] iframe').contents().find('span').effect('highlight', {}, 5000)" }
      .text
        Click on the run button. You'll see a red square moving slowly to the right.
    .tip{ 'data-code' => "$('[data-path=\"src/main.coffee\"] iframe').contents().find('span').effect('highlight', {}, 5000)" }
      .text
        That was fun but white is a really boring background color. Add the key/value pair
        %b backgroundColor: Color.random()
        above
        %b canvas: $("canvas").powerCanvas()
        to spice things up and then run the game again.
    .tip{ 'data-code' => "$('#file_src_square_coffee').prev().click()" }
      .text
        Okay, we're going to make you the boss now. Add the following above
        %b self
        at the bottom of
        %b src/square:
        %pre
          = preserve "self.bind 'step', ->\nif keydown.left\nI.velocity = Point(-2, 0)"
    .tip
      .text
        Try to make him move to the right and stop too.
    .tip
      .text
        Stay tuned for lesson two: Jumping.
  - else
    .tip{ 'data-element_selector' => "nav.left"}
      .text
        This is the code editor where you can edit your applications in the CoffeeScript language.
    .tip{ 'data-element_selector' => "ul.filetree", 'data-code' => "$('.filetree').effect('highlight', {}, 5000)" }
      .text
        The files needed to create your game are here.
    .tip{ 'data-element_selector' => "#run"}
      .text
        Click "Run" button to play through your game!
    .tip{ 'data-element_selector' => "#test_frame"}
      .text
        See the results, then make changes to your code as you wish.
    .tip{ 'data-element_selector' => ".file.documentation", 'data-code' => "$('#documentation').prev().click()"}
      .text
        Here you can read up on the provided classes.
    .tip{ 'data-element_selector' => "#export"}
      .text
        Pixie is an open platform. Click "Export" to download the last saved version of your project.
    .tip{ 'data-element_selector' => "#import" }
      .text
        Click "Import" to add your own images, javascript, and coffeescript files.
    .tip{ 'data-element_selector' => "#import_drop_zone", 'data-code' => '$("#import").mousedown();' }
      .text
        Drag files from your desktop to the file importer to make them available in your game.
    .tip{ 'data-element_selector' => "#test"}
      .text
        Click the "Test" button to run unit-tests. These can come in handy if you're
        working with heavily algorithmic stuff or library code.
    .tip{ 'data-element_selector' => "#save"}
      .text
        Click "Save" to save changes to a file.
    .tip{ 'data-element_selector' => ".actions .status"}
      .text
        All your changes are backed by version control. Your current status is
        saved as a commit message.
    .tip{ 'data-element_selector' => "#tag"}
      .text
        You can even "Tag" a specific version to keep track of milestones in your
        program's destiny.
    .tip{ 'data-element_selector' => "ul.filetree"}
      .text
        That's it for the tips. The IDE is a work in progress, so ask or leave
        = link_to "feedback", "/survey", :target => "_blank"
        if you have any questions!
  .next
    .next_tip.next(title="next" alt="next")
  .close
    .close_tip.x(title="close" alt="close")

:coffeescript
  $ ->
    $("#tooltip .next_tip").live "click", ->
      nextTip()

    $("#tooltip .close_tip").live "click", ->
      hideTooltip()

    tipIndex = -1
    nextTip = () ->
      tipIndex += 1
      tips = $("#tips .tip")
      moreTips = tipIndex < tips.length - 1

      tip = tips.eq(tipIndex)

      code = $(tip).attr("data-code")
      eval(code) if code

      targetElement = $($(tip).attr("data-element_selector"))

      # TODO Highlight target element

      hideTooltip()

      if tip.length
        tipMessage = tip.html()

        tipMessage += $("#tips .close").html()
        tipMessage += $("#tips .x").html()

        if moreTips
          tipMessage += $("#tips .next").html()

        showTooltip(targetElement, tipMessage)
      else
        tipIndex = -1

        if tips.length
          nextTip()

    nextTip()

    $('.help_tooltips').mousedown nextTip
