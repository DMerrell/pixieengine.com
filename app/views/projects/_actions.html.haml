%nav.top.actions
  - if demo? || has_access?
    %button#save Save
    .button_group
      %button#new> New
      %button#import> Import
      %button#export(title="Download your project files")> Export

  %button#fork Clone

  .button_group
    %button#run> Run
    %button#test> Test
  - if demo? || has_access?
    .button_group
      %button#build(title="Publish the current version of your game")> Publish
      %button#update_libs(title="Update to the latest version of libraries defined in pixie.json")> Update Libs

  - if current_user
    - if !current_user.help_tips
    - else
      %button#help>
        %span.static-help(alt="Help")
        Help
  - else
    %button#help>
      %span.static-help(alt="Help")
      Help

  .status
    %label.inline
      %h4 What are you working on?
      %input.message(placeholder="message" type="text")

- content_for :javascript do
  :coffeescript

    newFileModal = () ->
      $("#new_file_modal").modal
        onShow: (modal) ->
          $(modal.container).css
            height: 'auto'
            width: '425px'

    buildProjectCode = () ->
      clearErrorMessages()

      srcDir = findDirectory(projectConfig.directories.source)

      compiledCode = srcDir.find("span.file").map((index, span) ->
        $span = $(span)

        # Save main for last
        return if $span.parent().parent()[0] == srcDir[0] && $span.parent().attr("title") == projectConfig.main

        compileFileNode($span)
      ).get().join(";\n")

      libCode = compileDirectory(projectConfig.directories.lib)

      if projectConfig.library
        #TODO Clean up all these special library cases into a singe solid
        # app config / entities bootstrapper
        entitiesCode = ''
      else
        entitiesCode = CoffeeScript.compile "App.entities = \#{JSON.stringify(window.entities)}", bare: true

      if projectConfig.main
        mainCode = compileFileNode($(srcDir.children("[title=\#{projectConfig.main}]").find("span.file")))

        if projectConfig.wrapMain
          mainCode = ";$(function(){ \#{mainCode} });"

      else
        mainCode = ""

      crammedCode = [appConfigCode(), libCode, compiledCode, entitiesCode, mainCode].join(";\n")

    appConfigCode = ->
      if projectConfig.library
        ""
      else
        conf = CoffeeScript.compile "App = \#{JSON.stringify(projectConfig)}", bare: true

        [conf].join("\n")

    environmentVariables = ->
      "BASE_URL = #{project.base_url.to_json.gsub('"', '\\"')}; MTIME = (+ new Date().getTime());\n"

    runningAppWindow = null
    runApp = ->
      runningAppWindow = window.open("", "runApp", "width=\#{projectConfig.width},height=\#{projectConfig.height}")

      # Pass IDE functions to the running window
      $.extend runningAppWindow, {
        displayRuntimeError
        saveFile # For in game editor modes
      }

      #TODO Detect and halt on compile time errors
      crammedCode = [environmentVariables(), buildProjectCode()].join(";\n")

      runCodeInWindow(crammedCode, runningAppWindow)

    testApp = () ->
      clearErrorMessages()

      srcDir = findDirectory(projectConfig.directories.source)

      compiledCode = srcDir.find("span.file").map((index, span) ->
        $span = $(span)

        # Skip main
        return if $span.parent().parent()[0] == srcDir[0] && $span.parent().attr("title") == projectConfig.main

        compileFileNode($span)
      ).get().join(";\n")

      libCode = compileDirectory(projectConfig.directories.lib)
      testLibCode = compileDirectory(projectConfig.directories.test_lib)
      testCode = compileDirectory(projectConfig.directories.test)

      crammedCode = [environmentVariables(), appConfigCode(), libCode, testLibCode, compiledCode].join(";\n")
      crammedCode += "; var App; App || (App={}); $(function(){ \#{testCode} });"

      $("#unit_test_frame").remove()

      iframe = $ '<iframe />'
        height: 480
        id: "unit_test_frame"
        width: 640

      $("#unit_test_window").append(iframe).show()

      # Cram compiled code in iframe
      testCodeInWindow(crammedCode, iframe.get(0).contentWindow)

    window.hotSwap = ->
      src = $(currentPanel).find("[name=contents]").val()
      ext = $(currentPanel).data("ext")

      code = compileCode(src, ext)

      if code && runningAppWindow
        try
          runningAppWindow.eval(code)
        catch error
          warn? error.message

        try
          runningAppWindow.eval("engine.reload()")
        catch error
          warn? error.message

    window.saveFile = (data) ->
      requireLogin ->
        message = $(".actions .status .message").val()

        postData = $.extend(
          format: 'json'
          message: message
        , data)

        delete postData.success
        delete postData.error

        {success:successMethod, error:errorMethod} = data

        $.post("/projects/\#{projectId}/save_file", postData)
          .success ->
            successMethod?()
          .error ->
            errorMethod?()

    # Commands
    window.save = ->
      unsavedTabs = $("#tabs ul li.unsaved")

      if unsavedTabs.length
        # Save each unsaved tab
        unsavedTabs.each ->
          $(this).find('a').data('doSave')?()
      else
        # No unsaved tabs...
        # Force Save of active tab
        # This can work around buggy dirty states in editors
        activeTab = $("#tabs ul li.ui-state-active")
        activeTab.find('a').data('doSave')?()

    window.hotKeys =
      esc: ->
        #TODO Close running app window
        $('#test_frame').remove()
      f1: ->
        $('#help').click()
      f5: runApp
      f6: testApp

    ctrlKeys =
      s: save
      h: hotSwap
      n: newFileModal
      w: ->
        $('.ui-tabs-selected .ui-icon-close').click()

    # Merge in control keys with ctrl and meta modifiers for OSX
    $.each ctrlKeys, (key, fn) ->
      hotKeys["ctrl+\#{key} meta+\#{key}"] = fn

    window.bindKeys = (scopeDocument, keys) ->
      $.each keys, (key, fn) ->
        $(scopeDocument).bind "keydown", key, (e) ->
          e.preventDefault()
          fn()

    bindKeys(document, hotKeys)

    $("#build").live 'click', (event) ->
      notify("Publishing...")
      projectCode = buildProjectCode()

      saveFile
        contents: projectCode
        path: (projectConfig.name || "project") + ".js"
        touch: true
        success: ->
          notify("Published!")

      $.post #{generate_docs_project_path(project).to_json}

    $("#fork").click ->
      requireLogin ->
        notify("Hardcore Forking Action...")

        $.post(
          #{fork_project_path(project).to_json},
          format: 'json',
          (data) ->
            notify("<a href='/projects/\#{data.id}/ide'>Your carriage awaits!</a>")
            window.location = "/projects/\#{data.id}/ide"
        )

    $("#update_libs").click ->
      notify("Scheduling library update...")

      $.post #{update_libs_project_path(project).to_json}, ->
        notify("Library update scheduled", 4000)

    $(".actions .status .message").live "click", ->
      $(this).select()

    $("#test").click testApp
    $("#run").live 'click', runApp
    $("#new").live 'click', newFileModal
    $('#save').live 'click', save
