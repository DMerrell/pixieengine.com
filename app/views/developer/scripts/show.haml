%h2= script.title

%ul.actions
  - if owner?
    %li= link_to "#{image_tag "icons/pencil_go.png"} Edit".html_safe, edit_developer_script_path(script), :class => "button"

  - if current_user
    %li.listMenu.menu
      = link_to "#{image_tag "icons/book_add.png"} Add to Library".html_safe, '#', :class => "button", "data-script_id" => script.id
      %ul.round{:style => "display: none;"}
        - current_user.libraries.each do |library|
          %li{ "data-library_id" => library.id }
            = check_box_tag "library", "1", library.scripts.include?(script), :id => nil, :name => nil
            = library.title
        %li{ "data-library_id" => "new" } New Library


%p= script.description

%pre= script.code

#newLibraryModal.modalElement
  = render :partial => "developer/libraries/form"

:javascript
  $(function() {
    function ajaxifyForm(selector) {
      var form = $(selector);

      form.ajaxForm({
        dataType: 'json',
        beforeSerialize: function($form) {
          $form.find("input[name=script_id]").val(scriptId);
        },
        success: function(data) {
          if(data.status == "ok") {
            $.modal.close();
            newLibraryCallback(data.title, data.id);
          } else {
            var errorExplanation = form.find(".errorExplanation");
            if(errorExplanation.length == 0) {
              errorExplanation = $("<div class='errorExplanation' />");
            }

            var errorList = $("<ul />");
            $.each(data.errors, function(i, error) {
              errorList.append($("<li />").text(error));
            });

            errorExplanation.html('');
            errorExplanation.append(errorList);

            form.prepend(errorExplanation);
          }
        }
      });
    }

    function newLibraryCallback(title, id) {
      $(".listMenu ul li:last-child").each(function() {
        var parentScriptId = $(this).parent().prev().attr("data-script_id");
        var newElem = $("<li />").attr("data-library_id", id);
        newElem.text(title);

        if(parentScriptId == scriptId) {
          newElem.prepend("<input type='checkbox', value='1' checked='checked' />");
        } else {
          newElem.prepend("<input type='checkbox', value='1' />");
        }

        $(this).before(newElem);
      });
    }

    ajaxifyForm("#new_library");

    var displayedMenu;
    var scriptId;

    $(".listMenu .button").click(function() {
      scriptId = $(this).attr("data-script_id");
      displayedMenu = $(this).next("ul");
      displayedMenu.show();

      setTimeout(function() {
        $(document).one('click', function() {
          displayedMenu.fadeOut();
        });
      }, 0);

      return false;
    });

    $(".menu li").live("click", function(event) {
      var libraryId = $(this).attr("data-library_id");
      var checkbox = $(this).children("input");
      var boxClick = false;

      if($(event.target).is("input")) {
        boxClick = true;
      }

      if(libraryId == "new") {
        $("#newLibraryModal").modal();
      } else {
        var checked = !(checkbox.attr("checked") ^ boxClick);
        checkbox.attr("checked", checked);

        if(checked) {
          $.post("/developer/libraries/" + libraryId + "/add_script", {
            script_id: scriptId
          }, "json");
        } else {
          $.post("/developer/libraries/" + libraryId + "/remove_script", {
            script_id: scriptId
          }, "json");
        }
      }
    });
  });
