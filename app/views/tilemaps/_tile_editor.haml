- data ||= nil

- num_layers = 2

- tile_width = params[:tile_width].blank? ? 32 : params[:tile_width].to_i
- tile_height = params[:tile_height].blank? ? 32 : params[:tile_height].to_i

- tiles_wide = params[:tiles_wide].blank? ? 15 : params[:tiles_wide].to_i
- tiles_tall = params[:tiles_tall].blank? ? 10 : params[:tiles_tall].to_i

.tile_editor
  .main
    .screen
      .layers
        - num_layers.times do
          .layer

        .cursor
        .selection

  .bottom_bar
    .component#tile_select
      %h3 Tiles:
      .tiles
        - unless data
          - sprites = Collection.find(params[:tileset_id]).sprites
          - sprites.each do |sprite|
            - active = if sprite == sprites.first
              - "primary"
            - elsif sprite == sprites.second
              - "secondary"

            = image_tag(sprite.image.url, :alt => sprite.display_name, :class => active)


  .sidebar
    .component
      %h3#filename Tilemap
      %button#save Save

    .component
      %h3 Layer:
      .layer_select
        .choice.active
          .name Background
          .show.on

        .choice
          .name Foreground
          .show.on

      %button.new New Layer

    .component{ :style => "display: none"}
      %h3 Properties
      %table#prop_editor
      %button#prop_save Save Properties

  .sidebar2
    .component
      %h3 Saved Selections
      #saved_selections

  .tools.component
    %h3 Tools
    .tool.primary.secondary{ :"data-tool" => "stamp"}
    .tool{ :"data-tool" => "eraser"}
    .tool{ :"data-tool" => "fill"}
    .tool{ :"data-tool" => "selection"}

#layer_select.template
  .choice
    .name ${name}
    .show.on

:coffeescript
  debugMode = false

  firstGID = 1

  tilesWide = #{tiles_wide}
  tilesTall = #{tiles_tall}

  tileWidth = #{tile_width}
  tileHeight = #{tile_height}

  currentLayer = 0

  modeDown = null

  tileTray = ".bottom_bar .tiles"
  layerSelect = ".sidebar .layer_select"

  $.fn.tilePosition = (event) ->
    offset = this.offset()

    localY = (event.pageY - offset.top).snap(tileHeight).clamp(0, (tilesTall - 1) * tileHeight)
    localX = (event.pageX - offset.left).snap(tileWidth).clamp(0, (tilesWide - 1) * tileWidth)

    return {
      x: localX
      y: localY
    }

  addNewLayer = () ->
    $("#layer_select").tmpl(
      name: "Layer " + ($(".layer_select .choice").length + 1)
    ).appendTo(layerSelect).find('.name').mousedown()

    $("<div />",
      class: "layer"
    ).appendTo(".main .layers")

    $(".screen").find(".cursor, .selection").appendTo(".main .layers")

  selectNextVisibleLayer = () ->
    shownLayers = $(".layer_select .choice .show.on")

    if shownLayers.length
      shownLayers.eq(0).parent().find(".name").mousedown()

  prevTile = (mode) ->
    tileCount = $(".tiles img").length

    cur = $(".tiles ." + mode).removeClass(mode).index()

    $(".tiles img").eq((cur - 1).mod(tileCount)).addClass(mode)

  nextTile = (mode) ->
    tileCount = $(".tiles img").length

    cur = $(".tiles ." + mode).removeClass(mode).index()

    $(".tiles img").eq((cur + 1).mod(tileCount)).addClass(mode)

  inBounds = (x, y) ->
    (0 <= x < tileWidth * tilesWide) && (0 <= y < tileHeight * tilesTall)

  replaceTile = (x, y, tile) ->
    return unless inBounds(x, y)

    posString = x + "x" + y

    tile = tile.clone().removeClass("primary secondary").css(
      position: "absolute"
      top: y
      left: x
    ).attr("data-pos", posString)

    targetLayer = $(".screen .layer").eq(currentLayer)

    removeTile(x, y)

    targetLayer.append(tile)

  removeTile = (x, y) ->
    tileAt(x, y).remove()

  tileAt = (x, y) ->
    posString = x + "x" + y

    $(".screen .layer").eq(currentLayer).find("[data-pos='" + posString + "']")

  getNeighborPositions = (position) ->
    neighbors = [
      [position[0] - tileWidth, position[1]]
      [position[0] + tileWidth, position[1]]
      [position[0], position[1] - tileHeight]
      [position[0], position[1] + tileHeight]
    ].select (neighborPos) ->
      inBounds(neighborPos[0], neighborPos[1])

  floodFill = (x, y, tile) ->
    targetSrc = tileAt(x, y).attr("src")
    paintSrc = tile.attr("src")

    return if targetSrc == paintSrc

    queue = []

    replaceTile(x, y, tile)
    queue.push([x, y])

    while queue.length
      position = queue.pop()

      neighbors = getNeighborPositions(position);

      neighbors.each (neighbor, index) ->
        if neighbor && tileAt(neighbor[0], neighbor[1]).attr("src") == targetSrc
          replaceTile(neighbor[0], neighbor[1], tile)
          queue.push(neighbor)


  clearSelection = () ->
    $(".screen .selection").removeClass("active")

  selectionEach = (callback) ->
    $selection = $(".screen .selection")

    if $selection.hasClass("active")
      pos = $selection.position()
      selectionWidth = $selection.outerWidth()
      selectionHeight = $selection.outerHeight()

      y = pos.top
      while y < pos.top + selectionHeight
        x = pos.left
        while x < pos.left + selectionWidth
          callback(x, y)

          x += tileWidth
        y += tileHeight

      clearSelection()

  selectionDelete = () ->
    selectionEach(removeTile)

  savedSelectionCount = 0

  harvestSelection = (remove) ->
    rowY = undefined
    row = undefined

    selectionData = []

    selectionEach (x, y) ->
      if y != rowY
        rowY = y
        row = []
        selectionData.push row

      row.push tileAt(x, y).attr("src")

      if remove
        removeTile(x, y)

    s = $("<div/>",
      class: "selection"
      text: "Selection" + (++savedSelectionCount)
    ).appendTo("#saved_selections")

    s.data("selectionData", selectionData)

    selectTile(s, "primary")

    selectTool("stamp", "primary")

  selectionCopy = () ->
    harvestSelection()

  selectionCut = () ->
    harvestSelection(true)

  selectionStart = null
  select = (x, y) ->
    if selectionStart
      $selection = $(".screen .selection")
      pos = $selection.position()

      deltaX = x - selectionStart.x
      deltaY = y - selectionStart.y

      selectionWidth = deltaX.abs() + tileWidth
      selectionHeight = deltaY.abs() + tileHeight

      selectionLeft = if deltaX < 0 then x else selectionStart.x
      selectionTop = if deltaY < 0 then y else selectionStart.y

      $selection.css
        height: selectionHeight
        left: selectionLeft
        top: selectionTop
        width: selectionWidth

    else
      $(".screen .selection").addClass('active').css
        height: tileHeight
        left: x
        top: y
        width: tileWidth

      selectionStart = {x: x, y: y}

  stamp = (x, y, mode) ->
    if (tile = $(".tiles").find("." + mode)).length
      replaceTile(x, y, tile)
    else if selection = $("#saved_selections").find("." + mode).data("selectionData")
      selection.each (row, tileY) ->
        row.each (src, tileX) ->
          if src
            targetX = x + tileX * tileWidth
            targetY = y + tileY * tileHeight

            replaceTile(targetX, targetY, $(".tiles img[src="+src+"]").eq(0))

  currentTool = (mode) ->
    $(".tools .tool." + mode).data("tool")

  entered = (x, y) ->
    if mode = modeDown
      switch currentTool(mode)
        when "stamp"
          stamp(x, y, mode)
        when "eraser"
          removeTile(x, y)
        when "fill"
          floodFill(x, y, $(".tiles").find("." + mode))
        when "selection"
          select(x, y)

  clickMode = (event) ->
    if event.which == 1
      "primary"
    else if event.which == 3
      "secondary"

  selectTool = (name, mode) ->
    tool = $(".tools .tool[data-tool="+name+"]")
    tool.addClass(mode).siblings().removeClass(mode)

  selectTile = (tile, mode) ->
    $("#saved_selections .selection").removeClass(mode)
    $(".tiles img").removeClass(mode)
    tile.addClass(mode)

  $(".tile_editor").bind "contextmenu", (event) ->
    unless debugMode
      event.preventDefault()

  $(".tools .tool").live 'mousedown', (event) ->
    event.preventDefault()

    if mode = clickMode event
      $(this).addClass(mode).siblings().removeClass(mode)

  $(".tiles img, #saved_selections .selection").live "mousedown", (event) ->
    #event.preventDefault()

    if mode = clickMode event
      selectTile($(this), mode)

  $(".tiles img, #saved_selections .selection").live 'mouseup', (event) ->
    if event.which == 2
      $(this).remove()

  propElement = null
  $(".tiles img").live "dblclick", (event) ->
    propElement = $(this)
    propEditor.setProps(propElement.data("properties"))
    propEditor.parent().show()

  $("#prop_save").click (event) ->
    if propElement
      propElement.data("properties", propEditor.getProps())
      propEditor.parent().hide()

  $(".layer_select+button.new").click () ->
    addNewLayer()

  $(".layer_select .choice .name").live 'mousedown', (event) ->
    $layer = $(this).parent()
    $layer.addClass("active").siblings().removeClass("active")

    currentLayer = $layer.index()

  $(".layer_select").delegate ".show", 'mousedown', (event) ->
    $this = $(this)
    $choice = $this.parent()

    if $this.toggleClass("on").hasClass("on")
      $(".screen .layers .layer").eq($choice.index()).fadeIn()
      $choice.find(".name").mousedown()
    else
      $(".screen .layers .layer").eq($choice.index()).fadeOut()
      selectNextVisibleLayer()

  $(".screen .layers").bind "mousemove", (event) ->
    pos = $(this).tilePosition(event)

    oldPos = $(".screen .cursor").position()

    unless oldPos.left == pos.x && oldPos.top == pos.y
      entered(pos.x, pos.y)

      $(".screen .cursor").css
        left: pos.x
        top: pos.y

  $(".screen .layers").bind "mousedown", (event) ->
    if modeDown = clickMode event
      pos = $(this).tilePosition(event)

      entered(pos.x, pos.y)

  $(document).bind "mouseup", (event) ->
    selectionStart = null
    modeDown = null

  hotkeys =
    a: (event) ->
      prevTile("primary")
    z: (event) ->
      nextTile("primary")
    s: (event) ->
      prevTile("secondary")
    x: (event) ->
      nextTile("secondary")
    del: selectionDelete
    esc: clearSelection
    "ctrl+c": selectionCopy
    "ctrl+x": selectionCut


  $.each hotkeys, (key, fn) ->
    $(document).bind "keydown", key, (event) ->
      event.preventDefault()
      fn(event)

  $(tileTray).sortable()

  $("#tile_select").dropImageReader (file, event) ->
    if event.target.readyState == FileReader.DONE
      img = $ "<img/>",
        alt: file.name
        src: event.target.result
        title: file.name

      $(this).find(".tiles").append img

  $('#filename, .layer_select .name').liveEdit()

  propEditor = $("#prop_editor").propertyEditor({test: true, foo: "bar", noice: 13})

  $("#save").click () ->
    notify("Saving...")

    postData =
      format: 'json'
      tilemap:
        title: $("#filename").text()
        width: tilesWide
        height: tilesTall
        parent_id: #{@parent_id.to_json}
        data_string: JSON.stringify(saveData())

    $.post('/tilemaps', postData, (data) ->
      id = data.tilemap.id

      notify("Saved as <a href='/tilemaps/"+id+"'>Tilemap "+id+"</a>!")

      $("#flashes .notice")

    , "json")

  window.saveData = () ->
    tileset = $(".bottom_bar .tiles img").map((i) ->
      $this = $(this)

      mapTileData = {
        src: $this.attr("src")
      }

      if mapTileId = $this.data('guid')
        mapTileData.guid mapTileId

      if pixieId = $this.data("pixie_id")
        mapTileData.pixieId = mapTileSpriteId

      if props = $this.data("properties")
        mapTileData.properties = props

      return mapTileData
    ).get()

    layers = []

    $(".layer_select .choice").each (i) ->
      $this = $(this)

      screenLayer = $(".screen .layers .layer").eq(i)

      tiles = []

      #TODO: This is a dumb way to do it, it will ignore any non-grid aligned tiles and is pretty slow
      tilesTall.times (y) ->
        row = []
        tiles.push row

        tilesWide.times (x) ->
          posString = x * tileWidth + "x" + y * tileHeight

          img = screenLayer.find("img[data-pos='" + posString + "']")

          imgIndex = $(".bottom_bar .tiles img[src='"+img.attr('src')+"']").index()

          row.push imgIndex

      layer =
        name: $this.text()
        tiles: tiles

      layers.push layer

    return {
      version: "1.0"
      orientation: "orthogonal"
      width: tilesWide
      height: tilesTall
      tileWidth: tileWidth
      tileHeight: tileHeight

      tileset: tileset

      layers: layers
    }

  window.loadData = (data) ->
    tilesWide = data.width
    tilesTall = data.height
    tileWidth = data.tileWidth
    tileHeight = data.tileHeight

    tileLookup = {}

    $(tileTray).html('')
    data.tileset.each (tile, index) ->
      active = if index == 0
        "primary"
      else if index == 1
        "secondary"

      tileLookup[index] = $("<img />",
        class: active
        "data-guid": tile.guid
        "data-pixie_id": tile.pixieId
        src: tile.src
      ).appendTo(tileTray)

      if tile.properties
        tileLookup[index].data("properties", tile.properties)

    $(".main .layers .layer").remove()

    $(layerSelect).html('')
    data.layers.each (layer, i) ->
      currentLayer = i

      $("<div />",
        class: "layer"
      ).appendTo(".main .layers")

      $("#layer_select").tmpl(
        name: layer.name
      ).appendTo(layerSelect)

      layer.tiles.each (row, y) ->
        row.each (tile, x) ->
          if tile >= 0
            replaceTile(x * tileWidth, y * tileHeight, tileLookup[tile])

    $(".screen .cursor").css
      width: tileWidth
      height: tileHeight

    $(".screen").find(".cursor, .selection").appendTo(".main .layers")

    $(layerSelect).find(".name").first().trigger("mousedown")

%style
  :sass
    @import util

    $sidebar_width = 140px
    $bottom_bar_height = 140px

    input
      +box-sizing(border-box)

      background-color: transparent
      border: 2px solid #888
      color: #BFE2FF
      margin: 0
      max-width: 120px
      padding: 2px

      &#filename
        font-family: "Josefin Sans Std Light", Arial, serif
        font-size: 1.5em
        font-weight: bold
        height: 27px
        letter-spacing: 0.1em
        margin-bottom: 0.5em

    table.properties
      background-color: transparent
      border-spacing: 0
      tr
        td
          width: 50%
          input
            width: 100%

    .tile_editor
      +box-sizing(border-box)
      +user-select(none)

      cursor: default
      height: 100%
      padding-top: 4em

      &>.sidebar
        left: 0
        margin-top: 3em
        position: fixed
        top: 0
        width: 120px

      .sidebar2
        right: 0
        margin-top: 3em
        position: fixed
        top: 0
        width: 120px

      &>.main
        +box-sizing(border-box)

        height: 100%
        padding-bottom: $bottom_bar_height
        padding-left: $sidebar_width
        padding-right: $sidebar_width
        width: 100%

      .bottom_bar
        +box-sizing(border-box)

        background-color: #00010D
        bottom: 0
        height: $bottom_bar_height
        left: 0
        padding-left: $sidebar_width
        padding-right: $sidebar_width
        position: fixed
        width: 100%

        .tiles
          height: 70px
          overflow: auto

      .layer_select
        +inline-block

        width: 100%

        input
          +user-select(text)

        .choice
          .name
            +box-sizing(border-box)
            padding: 3px
            width: 90px

          input.name
            padding: 2px

        div.choice
          +inline-block

          cursor: pointer
          width: 100%

          &.active
            font-weight: bold

          .name
            +inline-block
            float: left

          .show
            display: none

          &:hover
            .show
              +inline-block
              +opacity(0.25)

              background-image: url(/images/tools/show.png)
              cursor: pointer
              float: right
              height: 16px
              width: 16px

              &.on
                +opacity(1)

      .component
        +box-sizing(border-box)
        background-color: #00010D
        color: #BFE2FF
        padding: 0.5em
        width: 100%

        h3
          +text-shadow(#0A131A)
          color: #BFE2FF
          font-weight: bold

      #saved_selections
        .selection
          padding: 1px

          &.primary, &.secondary
            border: 1px solid
            font-weight: bold
            padding: 0px

          &.primary
            border-color: green
          &.secondary
            border-color: blue

      .tools
        +tile_tool(eraser)
        +tile_tool(fill)
        +tile_tool(selection)
        +tile_tool(stamp)

        bottom: 0
        left: 0
        position: fixed
        width: $sidebar_width
        height: $bottom_bar_height

        .tool
          +inline-block

          background-repeat: no-repeat

          cursor: pointer
          height: 32px
          padding: 1px
          width: 32px

          &.primary, &.secondary
            border: 1px solid
            padding: 0px

          &.primary
            border-color: green
          &.secondary
            border-color: blue

      .screen
        +box-sizing(border-box)

        height: 100%
        margin: auto
        overflow: auto
        position: relative
        width: 100%

        .layers
          background-image: url('/images/tile-editor-grid.png')
          border-bottom: 1px solid #414141
          border-right: 1px solid #414141

          height: #{tiles_tall * tile_height}px
          width: #{tiles_wide * tile_width}px

        .layer
          height: #{tiles_tall * tile_height}px
          left: 0
          position: absolute
          top: 0
          width: #{tiles_wide * tile_width}px

        .cursor
          border: 1px solid green
          height: #{tile_height}px
          position: absolute
          width: #{tile_width}px

        .selection
          +box-sizing(border-box)
          border: 0px solid red
          position: absolute

          &.active
            border-width: 2px

      img
        +inline-block

        margin-bottom: 2px
        padding: 1px

        &.primary, &.secondary
          border: 1px solid
          padding: 0px

        &.primary
          border-color: green
        &.secondary
          border-color: blue
