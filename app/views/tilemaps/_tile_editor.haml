= stylesheet_link_tag 'pixie/pixie'

= render :partial => "pixie"

:coffeescript
  templates = $("#tile_editor_templates")

  $.fn.tileEditor = (options) ->
    options = $.extend(
      layers: 2
      tilesWide: 20
      tilesTall: 15
      tileWidth: 32
      tileHeight: 32
    , options)

    return this.each ->
      tileEditor = $(this).addClass("tile_editor")

      templates.find(".editor.template").tmpl().appendTo(tileEditor)

      tileEditor.mousedown ->
        window.currentComponent = tileEditor

      debugMode = false

      firstGID = 1

      tilesWide = options.tilesWide
      tilesTall = options.tilesTall

      tileWidth = options.tileWidth
      tileHeight = options.tileHeight

      currentLayer = 0

      modeDown = null

      tileTray = "nav.bottom .tiles"
      layerSelect = "nav.left .layer_select"

      positionElementIndices = []

      tilePosition = (element, event) ->
        offset = element.offset()

        localY = (event.pageY - offset.top).snap(tileHeight).clamp(0, (tilesTall - 1) * tileHeight)
        localX = (event.pageX - offset.left).snap(tileWidth).clamp(0, (tilesWide - 1) * tileWidth)

        return {
          x: localX
          y: localY
        }

      addScreenLayer = () ->
        $("<div />",
          class: "layer"
          width: tilesWide * tileWidth
          height: tilesTall * tileHeight
        ).appendTo("section .layers")

        tileEditor.find(".screen").find(".cursor, .selection").appendTo("section .layers")

        positionElementIndices.push {}

      addNewLayer = () ->
        templates.find(".layer_select.template").tmpl(
          name: "Layer " + (tileEditor.find(".layer_select .choice").length + 1)
        ).appendTo(layerSelect).find('.name').mousedown()

        addScreenLayer()

      selectNextVisibleLayer = () ->
        shownLayers = tileEditor.find(".layer_select .choice .show.on")

        if shownLayers.length
          shownLayers.eq(0).parent().find(".name").mousedown()

      prevTile = (mode) ->
        tileCount = $(".tiles img").length

        cur = tileEditor.find(".tiles ." + mode).removeClass(mode).index()

        tileEditor.find(".tiles img").eq((cur - 1).mod(tileCount)).addClass(mode)

      nextTile = (mode) ->
        tileCount = tileEditor.find(".tiles img").length

        cur = tileEditor.find(".tiles ." + mode).removeClass(mode).index()

        tileEditor.find(".tiles img").eq((cur + 1).mod(tileCount)).addClass(mode)

      inBounds = (x, y) ->
        (0 <= x < tileWidth * tilesWide) && (0 <= y < tileHeight * tilesTall)

      replaceTile = (x, y, tile) ->
        return unless inBounds(x, y)

        posString = x + "x" + y

        tile = tile.clone().removeClass("primary secondary").css(
          position: "absolute"
          top: y
          left: x
        ).attr("data-pos", posString)

        targetLayer = tileEditor.find(".screen .layer").eq(currentLayer)

        removeTile(x, y)

        targetLayer.append(tile)

        positionElementIndices[currentLayer][posString] = tile.get()

      removeTile = (x, y) ->
        tileAt(x, y).remove()

        posString = x + "x" + y
        positionElementIndices[currentLayer][posString] = undefined

      tileAt = (x, y) ->
        posString = x + "x" + y

        $(positionElementIndices[currentLayer][posString])

      getNeighborPositions = (position) ->
        neighbors = [
          [position[0] - tileWidth, position[1]]
          [position[0] + tileWidth, position[1]]
          [position[0], position[1] - tileHeight]
          [position[0], position[1] + tileHeight]
        ].select (neighborPos) ->
          inBounds(neighborPos[0], neighborPos[1])

      floodFill = (x, y, tile) ->
        inSelection = isInSelection(x, y)
        targetSrc = tileAt(x, y).attr("src")
        paintSrc = tile.attr("src")

        return if targetSrc == paintSrc

        queue = []

        replaceTile(x, y, tile)
        queue.push([x, y])

        while queue.length
          position = queue.pop()

          neighbors = getNeighborPositions(position);

          neighbors.each (neighbor, index) ->
            if inSelection == isInSelection(neighbor[0], neighbor[1])
              if neighbor && tileAt(neighbor[0], neighbor[1]).attr("src") == targetSrc
                replaceTile(neighbor[0], neighbor[1], tile)
                queue.push(neighbor)


      selectionCache = null
      isInSelection = (x, y) ->
        if selectionCache
          selectionCache.top <= y < selectionCache.top + selectionCache.height &&
          selectionCache.left <= x < selectionCache.left + selectionCache.width
        else
          false

      clearSelection = () ->
        tileEditor.find(".screen .selection").removeClass("active")
        selectionCache = null

      selectionEach = (callback) ->
        $selection = tileEditor.find(".screen .selection")

        if $selection.hasClass("active")
          pos = $selection.position()
          selectionWidth = $selection.outerWidth()
          selectionHeight = $selection.outerHeight()

          y = pos.top
          while y < pos.top + selectionHeight
            x = pos.left
            while x < pos.left + selectionWidth
              callback(x, y)

              x += tileWidth
            y += tileHeight

          clearSelection()

      selectionDelete = () ->
        selectionEach(removeTile)

      savedSelectionCount = 0

      harvestSelection = (remove) ->
        rowY = undefined
        row = undefined

        savedSelection = templates.find(".saved_selection.template").tmpl(
          text: "Selection" + (++savedSelectionCount)
        ).appendTo(".saved_selections")

        preview = savedSelection.find(".preview")

        selectionData = []

        selectionEach (x, y) ->
          if y != rowY
            rowY = y
            row = []
            selectionData.push row

          tile = tileAt(x, y).clone()
          row.push tile.attr("src")

          tile.css(
            position: "absolute"
            top: (selectionData.length - 1) * tileHeight
            left: (row.length - 1) * tileWidth
          )

          preview.append(tile)

          if remove
            removeTile(x, y)

        savedSelection.data("selectionData", selectionData)

        selectTile(savedSelection, "primary")

        selectTool("stamp", "primary")

      selectionCopy = () ->
        harvestSelection()

      selectionCut = () ->
        harvestSelection(true)

      selectionStart = null
      select = (x, y) ->
        if selectionStart
          $selection = tileEditor.find(".screen .selection")
          pos = $selection.position()

          deltaX = x - selectionStart.x
          deltaY = y - selectionStart.y

          selectionWidth = deltaX.abs() + tileWidth
          selectionHeight = deltaY.abs() + tileHeight

          selectionLeft = if deltaX < 0 then x else selectionStart.x
          selectionTop = if deltaY < 0 then y else selectionStart.y

          selectionCache =
            height: selectionHeight
            left: selectionLeft
            top: selectionTop
            width: selectionWidth

          $selection.css selectionCache

        else
          selectionCache =
            height: tileHeight
            left: x
            top: y
            width: tileWidth

          tileEditor.find(".screen .selection").addClass('active').css selectionCache

          selectionStart = {x: x, y: y}

      stamp = (x, y, mode) ->
        if (tile = tileEditor.find(".tiles").find("." + mode)).length
          replaceTile(x, y, tile)
        else if selection = tileEditor.find(".saved_selections").find("." + mode).data("selectionData")
          selection.each (row, tileY) ->
            row.each (src, tileX) ->
              if src
                targetX = x + tileX * tileWidth
                targetY = y + tileY * tileHeight

                replaceTile(targetX, targetY, tileEditor.find(".tiles img[src="+src+"]").eq(0))

      currentTool = (mode) ->
        tileEditor.find(".tools .tool." + mode).data("tool")

      entered = (x, y) ->
        if mode = modeDown
          switch currentTool(mode)
            when "stamp"
              stamp(x, y, mode)
            when "eraser"
              removeTile(x, y)
            when "fill"
              floodFill(x, y, tileEditor.find(".tiles").find("." + mode))
            when "selection"
              select(x, y)

      clickMode = (event) ->
        if event.which == 1
          "primary"
        else if event.which == 3
          "secondary"

      selectTool = (name, mode) ->
        tool = tileEditor.find(".tools .tool[data-tool="+name+"]")
        tool.takeClass(mode)

      selectTile = (tile, mode) ->
        tileEditor.find(".saved_selections .selection").removeClass(mode)
        tileEditor.find(".tiles img").removeClass(mode)
        tile.addClass(mode)

      tileEditor.bind "contextmenu", (event) ->
        unless debugMode
          event.preventDefault()

      $(".tools .tool", tileEditor).live 'mousedown', (event) ->
        event.preventDefault()

        if mode = clickMode event
          $(this).takeClass(mode)

      $(".tiles img, .saved_selections .selection", tileEditor).live
        mousedown: (event) ->
          event.preventDefault()

          if mode = clickMode event
            selectTile($(this), mode)

      $(".tiles img, .saved_selections .selection", tileEditor).live 'mouseup', (event) ->
        if event.which == 2
          $(this).remove()

      propElement = null
      $(".tiles img", tileEditor).live "dblclick", (event) ->
        propElement = $(this)
        propEditor.setProps(propElement.data("properties"))
        propEditor.parent().show()

      tileEditor.find(".prop_save").click (event) ->
        if propElement
          propElement.data("properties", propEditor.getProps())
          propEditor.parent().hide()

      tileEditor.find(".layer_select").parent().find('.new').click () ->
        addNewLayer()

      $(".layer_select .choice .name", tileEditor).live 'mousedown', (event) ->
        $layer = $(this).parent()
        $layer.takeClass("active")

        currentLayer = $layer.index()

      tileEditor.find(".layer_select").delegate ".show", 'mousedown', (event) ->
        $this = $(this)
        $choice = $this.parent()

        if $this.toggleClass("on").hasClass("on")
          tileEditor.find(".screen .layers .layer").eq($choice.index()).fadeIn()
          $choice.find(".name").mousedown()
        else
          tileEditor.find(".screen .layers .layer").eq($choice.index()).fadeOut()
          selectNextVisibleLayer()

      tileEditor.find(".screen .layers").bind "mousemove", (event) ->
        pos = tilePosition($(this), event)

        oldPos = tileEditor.find(".screen .cursor").position()

        unless oldPos.left == pos.x && oldPos.top == pos.y
          entered(pos.x, pos.y)

          tileEditor.find(".screen .cursor").css
            left: pos.x
            top: pos.y

      tileEditor.find(".screen .layers").bind "mousedown", (event) ->
        if modeDown = clickMode event
          pos = tilePosition($(this), event)

          entered(pos.x, pos.y)

      $(document).bind "mouseup", (event) ->
        selectionStart = null
        modeDown = null

      hotkeys =
        a: (event) ->
          prevTile("primary")
        z: (event) ->
          nextTile("primary")
        s: (event) ->
          prevTile("secondary")
        x: (event) ->
          nextTile("secondary")
        p: ->
          selectedTile = tileEditor.find('.tiles img.primary')
          imgSource = selectedTile.attr('src')

          pixelEditor = createPixelEditor
            width: selectedTile.get(0).width
            height: selectedTile.get(0).height
            tileEditor: tileEditor
            url: imgSource.replace('http://images.pixie.strd6.com', '/s3')

          pixelEditor.bind 'save', (event, data) ->
            img = $ "<img/>",
              src: data

            tileEditor.find('.component .tiles').append img

        backspace: selectionDelete
        del: selectionDelete
        esc: clearSelection
        "ctrl+c": selectionCopy
        "ctrl+x": selectionCut

      $.each hotkeys, (key, fn) ->
        $(document).bind "keydown", key, (event) ->
          if window.currentComponent == tileEditor
            event.preventDefault()
            fn(event)

      tileEditor.find(tileTray).sortable()

      tileEditor.find(".component.tile_select").dropImageReader (file, event) ->
        if event.target.readyState == FileReader.DONE
          img = $ "<img/>",
            alt: file.name
            src: event.target.result
            title: file.name

          $(this).find(".tiles").append img

      $('.filename, .layer_select .name, .saved_selections .name', tileEditor).liveEdit()

      propEditor = $(".prop_editor", tileEditor).propertyEditor({test: true, foo: "bar", noice: 13})

      tileEditor.find("button.save").click () ->
        notify("Saving...")

        postData =
          format: 'json'
          tilemap:
            title: tileEditor.find(".filename").text()
            width: tilesWide
            height: tilesTall
            parent_id: #{@parent_id.to_json}
            data_string: JSON.stringify(saveData())

        $.post('/tilemaps', postData, (data) ->
          id = data.tilemap.id

          notify("Saved as <a href='/tilemaps/"+id+"'>Tilemap "+id+"</a>!")

        , "json")

      saveData = () ->
        tileIndexLookup = {}

        tileset = tileEditor.find("nav.bottom .tiles img").map((i) ->
          $this = $(this)
          src = $this.attr("src")

          tileIndexLookup[src] = i

          mapTileData = {
            src: src
          }

          if mapTileId = $this.data('guid')
            mapTileData.guid mapTileId

          if pixieId = $this.data("pixie_id")
            mapTileData.pixieId = mapTileSpriteId

          if props = $this.data("properties")
            mapTileData.properties = props

          return mapTileData
        ).get()

        layers = []

        tileEditor.find(".layer_select .choice").each (i) ->
          $this = $(this)

          screenLayer = tileEditor.find(".screen .layers .layer").eq(i)

          tileLookup = {}

          screenLayer.find("img").each () ->
            src = this.getAttribute("src")

            tileLookup[this.getAttribute("data-pos")] = tileIndexLookup[src]

          tiles = []

          tilesTall.times (y) ->
            row = []
            tiles.push row

            tilesWide.times (x) ->
              posString = x * tileWidth + "x" + y * tileHeight

              imgIndex = if tileLookup[posString]? then tileLookup[posString] else -1

              row.push imgIndex

          layer =
            name: $this.text()
            tiles: tiles

          layers.push layer

        return {
          version: "1.0"
          orientation: "orthogonal"
          width: tilesWide
          height: tilesTall
          tileWidth: tileWidth
          tileHeight: tileHeight

          tileset: tileset

          layers: layers
        }

      loadData = (data) ->
        tilesWide = data.width
        tilesTall = data.height
        tileWidth = data.tileWidth
        tileHeight = data.tileHeight

        tileEditor.find('.screen .layers').css('background-image', 'url(/images/tile_grid_' + tileWidth + '.png)')

        positionElementIndices = []

        tileLookup = {}

        tileEditor.find(tileTray).html('')
        data.tileset.each (tile, index) ->
          active = if index == 0
            "primary"
          else if index == 1
            "secondary"

          tileLookup[index] = $("<img />",
            class: active
            "data-guid": tile.guid
            "data-pixie_id": tile.pixieId
            src: tile.src
          ).appendTo(tileTray)

          if tile.properties
            tileLookup[index].data("properties", tile.properties)

        tileEditor.find("section .layers .layer").remove()

        tileEditor.find(layerSelect).html('')
        data.layers.each (layer, i) ->
          currentLayer = i

          addScreenLayer()

          templates.find(".layer_select.template").tmpl(
            name: layer.name
          ).appendTo(layerSelect)

          layer.tiles.each (row, y) ->
            row.each (tile, x) ->
              if tile >= 0
                replaceTile(x * tileWidth, y * tileHeight, tileLookup[tile])

        tileEditor.find(layerSelect).find(".name").first().trigger("mousedown")

      if options.data
        loadData options.data
      else
        options.layers.times ->
          addNewLayer()

      tileEditor.find(".screen .cursor").css
        width: tileWidth
        height: tileHeight

      tileEditor.find(".screen .layers").css
        width: tilesWide * tileWidth
        height: tilesTall * tileHeight

%style
  :sass
    @import partials/base
    @import util

    $sidebar_width: 220px
    $bottom_bar_height: 140px

    .tile_editor
      +box-sizing(border-box)
      +user-select(none)

      cursor: default
      height: 100%
      position: relative

      &>nav
        +border-radius
        +box-sizing(border-box)

        background-color: $dark_highlight
        min-height: 142px
        padding: 10px

        .light &
          background-color: $light_highlight

        &.left, &.right
          width: $sidebar_width

          .component:first-child
            padding-top: 0

      table.properties
        background-color: transparent
        border-spacing: 0
        tr
          td
            width: 50%
            input
              width: 100%

      input
        +box-sizing(border-box)

        color: #000
        margin: 0
        max-width: 120px
        padding: 2px

      .filename
        font-family: "Josefin Sans Std Light", Arial, serif
        font-size: 1.5em
        font-weight: bold
        height: 27px
        letter-spacing: 0.1em
        margin-bottom: 0.5em

      nav.left
        .component
          position: relative

          h3
            +inline-block

            margin-bottom: 10px

          button.save, button.new
            margin-top: auto
            margin-bottom: auto
            position: absolute
            right: 0

      &>section
        padding-bottom: $bottom_bar_height
        padding-left: $sidebar_width + 20
        padding-right: $sidebar_width + 20

      nav.bottom
        +border-radius

        height: $bottom_bar_height
        padding-left: $sidebar_width
        padding-right: $sidebar_width

        .tiles
          height: 70px
          overflow: auto

      .layer_select
        +inline-block

        width: 100%

        input
          +user-select(text)

        .choice
          .name
            +box-sizing(border-box)
            padding: 3px
            width: 90px

          input.name
            padding: 2px

        div.choice
          +inline-block

          cursor: pointer
          width: 100%

          &.active
            font-weight: bold

          .name
            +inline-block
            float: left

          .show
            display: none

          &:hover
            .show
              +inline-block
              +opacity(0.25)

              background-image: url(/images/tools/show.png)
              cursor: pointer
              float: right
              height: 16px
              width: 16px

              &.on
                +opacity(1)

      .component
        +box-sizing(border-box)
        width: 100%

      .saved_selections
        .selection
          padding: 1px

          &.primary, &.secondary
            border: 1px solid
            font-weight: bold
            padding: 0px

          &.primary
            border-color: green
          &.secondary
            border-color: blue

          .name
            padding: 3px

          input.name
            padding: 2px

          .preview
            display: none
            position: relative

          &:hover
            .preview
              display: block

      .tools
        +bounds($sidebar_width, $bottom_bar_height)
        +tile_tool(eraser)
        +tile_tool(fill)
        +tile_tool(selection)
        +tile_tool(stamp)

        bottom: 0
        left: 0
        position: absolute

        .tool
          +bounds(32px)
          +inline-block

          background-repeat: no-repeat
          border: 1px solid transparent
          cursor: pointer
          margin: 1px

          &.primary, &.secondary
            border: 1px solid
            padding: 0px

          &.primary
            border-color: green
          &.secondary
            border-color: blue

      .screen
        .layers
          background-image: url('/images/tile_grid_32.png')
          border-bottom: 1px solid #414141
          border-right: 1px solid #414141

        .layer
          left: 0
          position: absolute
          top: 0

        .cursor
          border: 1px solid green
          position: absolute

        .selection
          +box-sizing(border-box)
          border: 0px solid red
          position: absolute

          &.active
            border-width: 2px

      img
        +inline-block

        margin-bottom: 2px
        padding: 1px

        &.primary, &.secondary
          border: 1px solid
          padding: 0px

        &.primary
          border-color: green
        &.secondary
          border-color: blue
