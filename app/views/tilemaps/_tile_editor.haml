- data ||= nil

- num_layers = 2

- tile_width = 32
- tile_height = 32

- tiles_wide = params[:tiles_wide].blank? ? 15 : params[:tiles_wide].to_i
- tiles_tall = params[:tiles_tall].blank? ? 10 : params[:tiles_tall].to_i

.tile_editor
  .main
    .screen
      .layers
        - num_layers.times do
          .layer

        .selection

  .bottom_bar
    .component
      %h3 Tiles:
      .tiles
        - unless data
          - Collection.find(params[:tileset_id]).sprites.each do |sprite|
            = image_tag(sprite.image.url, :alt => sprite.display_name)


  .sidebar
    .component
      %h3#filename Tilemap
      %button#save Save

    .component
      %h3 Layer:
      .layer_select
        .choice.active Background
        .choice Foreground


:coffeescript
  debugMode = false

  firstGID = 1

  tilesWide = #{tiles_wide}
  tilesTall = #{tiles_tall}

  tileWidth = #{tile_width}
  tileHeight = #{tile_height}

  gridResolutionX = tileWidth
  gridResolutionY = tileHeight

  currentLayer = 0

  modeDown = null

  tileTray = ".bottom_bar .tiles"
  layerSelect = ".sidebar .layer_select"

  $.fn.tilePosition = (event) ->
    offset = this.offset()

    localY = (event.pageY - offset.top).snap(gridResolutionY).clamp(0, (tilesTall - 1) * tileHeight)
    localX = (event.pageX - offset.left).snap(gridResolutionX).clamp(0, (tilesWide - 1) * tileWidth)

    return {
      x: localX
      y: localY
    }

  prevTile = (mode) ->
    tileCount = $(".tiles img").length

    cur = $(".tiles ." + mode).removeClass(mode).index()

    $(".tiles img").eq((cur - 1).mod(tileCount)).addClass(mode)

  nextTile = (mode) ->
    tileCount = $(".tiles img").length

    cur = $(".tiles ." + mode).removeClass(mode).index()

    $(".tiles img").eq((cur + 1).mod(tileCount)).addClass(mode)

  placeTile = (x, y, tile) ->
    posString = x + "x" + y

    tile = tile.clone().removeClass("primary secondary").css(
      position: "absolute"
      top: y
      left: x
    ).attr("data-pos", posString)

    targetLayer = $(".screen .layer").eq(currentLayer)

    targetLayer.find("[data-pos='" + posString + "']").remove()

    targetLayer.append(tile)

  entered = (x, y) ->
    if mode = modeDown
      placeTile(x, y, $(".tiles").find("." + mode))

  clickMode = (event) ->
    if event.which == 1
      "primary"
    else if event.which == 3
      "secondary"

  $(".tile_editor").bind "contextmenu", (event) ->
    unless debugMode
      event.preventDefault()

  $(".tiles img").live 'mousedown', (event) ->
    event.preventDefault()

    if mode = clickMode event
      $(this).addClass(mode).siblings().removeClass(mode)

  $(".layer_select .choice").live 'mousedown', (event) ->
    $(this).addClass("active").siblings().removeClass("active")

    currentLayer = $(this).index()

  $(".screen .layers").bind "mousemove", (event) ->
    pos = $(this).tilePosition(event)

    oldPos = $(".screen .selection").position()

    unless oldPos.left == pos.x && oldPos.top == pos.y
      entered(pos.x, pos.y)

      $(".screen .selection").css
        left: pos.x
        top: pos.y

  $(".screen .layers").bind "mousedown", (event) ->
    if modeDown = clickMode event
      pos = $(this).tilePosition(event)

      entered(pos.x, pos.y)

  $(document).bind "mouseup", (event) ->
    modeDown = null

  hotkeys =
    a: (event) ->
      prevTile("primary")
    z: (event) ->
      nextTile("primary")
    s: (event) ->
      prevTile("secondary")
    x: (event) ->
      nextTile("secondary")

  $.each hotkeys, (key, fn) ->
    $(document).bind "keydown", key, fn

  $("body").attr("id", "fullscreen")

  $(".bottom_bar .tiles").dropImageReader (file, event) ->
    if event.target.readyState == FileReader.DONE
      img = $ "<img/>",
        alt: file.name
        src: event.target.result
        title: file.name

      $(this).append img

  $('.layer_select div.choice').live 'dblclick', () ->
    $this = $(this)

    textInput = $("<input/>",
      class: $this.attr("class")
      type: "text"
      value: $this.text()
    )

    $this.replaceWith textInput

    textInput.focus()

  $('.layer_select input').live 'blur', () ->
    $this = $(this)

    $this.replaceWith $("<div />",
      class: $this.attr("class")
      text: $this.val()
    )

  $("#save").click () ->
    notify("Saving...")

    postData =
      format: 'json'
      tilemap:
        title: $("#filename").text()
        width: tilesWide
        height: tilesTall
        parent_id: #{@parent_id.to_json}
        data_string: JSON.stringify(saveData())

    $.post('/tilemaps', postData, (data) ->
      console.log(data)

      notify("Saved!")

      $("#flashes .notice").delay(2000).slideUp("slow")

    , "json")

  window.saveData = () ->
    tileset = $(".bottom_bar .tiles img").map((i) ->
      $this = $(this)

      mapTileData = {
        src: $this.attr("src")
      }

      if mapTileId = $this.data('guid')
        mapTileData.guid mapTileId

      if pixieId = $this.data("pixie_id")
        mapTileData.pixieId = mapTileSpriteId

      return mapTileData
    ).get()

    layers = []

    $(".layer_select .choice").each (i) ->
      $this = $(this)

      screenLayer = $(".screen .layers .layer").eq(i)

      tiles = []

      #TODO: This is a dumb way to do it, it will ignore any non-grid aligned tiles and is pretty slow
      tilesTall.times (y) ->
        row = []
        tiles.push row

        tilesWide.times (x) ->
          posString = x * tileWidth + "x" + y * tileHeight

          img = screenLayer.find("img[data-pos='" + posString + "']")

          imgIndex = $(".bottom_bar .tiles img[src='"+img.attr('src')+"']").index()

          row.push imgIndex

      layer =
        name: $this.text()
        tiles: tiles

      layers.push layer

    return {
      version: "1.0"
      orientation: "orthogonal"
      width: tilesWide
      height: tilesTall
      tileWidth: tileWidth
      tileHeight: tileHeight

      tileset: tileset

      layers: layers
    }

  window.loadData = (data) ->
    tilesWide = data.width
    tilesTall = data.height
    tileWidth = data.tileWidth
    tileHeight = data.tileHeight

    tileLookup = {}

    $(tileTray).html('')
    data.tileset.each (tile, index) ->
      tileLookup[index] = $("<img />",
        "data-guid": tile.guid
        "data-pixie_id": tile.pixieId
        src: tile.src
      ).appendTo(tileTray)

    $(".main .layers .layer").remove()

    $(layerSelect).html('')
    data.layers.each (layer, i) ->
      currentLayer = i

      $("<div />",
        class: "layer"
      ).appendTo(".main .layers")

      $("<div />",
        class: "choice"
        text: layer.name
      ).appendTo(layerSelect)

      layer.tiles.each (row, y) ->
        row.each (tile, x) ->
          if tile >= 0
            placeTile(x * tileWidth, y * tileHeight, tileLookup[tile])

    $(".screen .selection").appendTo(".main .layers")

    $(layerSelect).find(".choice").first().trigger("mousedown")

%style
  :sass
    @import util

    $sidebar_width = 140px
    $bottom_bar_height = 140px

    .tile_editor
      +box-sizing(border-box)
      +user-select(none)

      cursor: default
      height: 100%
      padding-top: 4em

      &>.sidebar
        left: 0
        margin-top: 3em
        position: fixed
        top: 0
        width: 120px

      &>.main
        +box-sizing(border-box)

        height: 100%
        padding-bottom: $bottom_bar_height
        padding-left: $sidebar_width
        padding-right: $sidebar_width
        width: 100%

      .bottom_bar
        +box-sizing(border-box)

        background-color: #00010D
        bottom: 0
        height: $bottom_bar_height
        left: 0
        padding-left: $sidebar_width
        padding-right: $sidebar_width
        position: fixed
        width: 100%

      .layer_select
        +inline-block

        input
          +user-select(text)

        div.choice
          cursor: pointer

          &.active
            font-weight: bold

      .component
        +box-sizing(border-box)
        background-color: #00010D
        color: #BFE2FF
        padding: 0.5em
        width: 100%

        h3
          +text-shadow(#0A131A)
          color: #BFE2FF
          font-weight: bold

      .screen
        +box-sizing(border-box)

        height: 100%
        margin: auto
        overflow: auto
        position: relative
        width: 100%

        .layers
          background-image: url('/images/tile-editor-grid.png')
          border-bottom: 1px solid #414141
          border-right: 1px solid #414141

          height: #{tiles_tall * tile_height}px
          width: #{tiles_wide * tile_width}px

        .layer
          height: #{tiles_tall * tile_height}px
          left: 0
          position: absolute
          top: 0
          width: #{tiles_wide * tile_width}px

        .selection
          border: 2px solid green
          height: 29px
          position: absolute
          width: 29px

      img
        +inline-block

        margin-bottom: 2px
        padding: 1px

        &.primary, &.secondary
          border: 1px solid
          padding: 0px

        &.primary
          border-color: green
        &.secondary
          border-color: blue
