.hitcircle_editor
  %nav.top
    .actions
  %section
    .frames
      %canvas#editor_canvas{:width => 640, :height => 480}
      - if @user_sprites.empty?
        %p
          You have not created any sprites yet. Make some in the
          = link_to "Pixel Editor", root_path
      - else
        = render :partial => 'animations/animation_sprite', :collection => @user_sprites[0..6]

  .preview_box
    %div.animation_speed
      Speed
      %input{ :id => "animation_speed", :value => "110" }
      ms
    .sprite_container
      .sprites
      #play
      #stop

:coffeescript
  transform = Matrix.translation(320, 240)
  animation = null
  animationJSON = null
  currentFrame = 0
  active = {}

  frames = null

  # Display properties
  showCircles = true
  activeColor = "rgba(255, 0, 255, 0.5)"
  circleColor = "rgba(255, 0, 0, 0.5)"

  $('#editor_canvas').powerCanvas
    init: (canvas) ->
      character =
        getCircles: ->
          transform = this.getTransform()

          if frames && frames[currentFrame]
            return $.map frames[currentFrame].circles, (circle) ->
              point = transform.transformPoint(circle)
              return {
                x: point.x
                y: point.y
                radius: circle.radius
                circle: circle
              }
          else
            return []

        getTransform: -> transform

        draw: (canvas) ->
          if animation
            animation.frame(currentFrame)

            canvas.withTransform this.getTransform(), ->
              animation.draw(canvas, -animation.width / 2, -animation.height / 2)

          if showCircles
            $.each this.getCircles(), (i, circle) ->
              color = (circle.circle == active["circles"] ? activeColor : circleColor)
              canvas.fillCircle(circle.x, circle.y, circle.radius, color)

      setInterval ->
        canvas.fill('#CCC')
        character.draw(canvas)
      , 33

      canvas.click (e) ->
        point =
          x: event.offsetX
          y: event.offsetY

        activeType = "circles"
        activeComponent = undefined
        set = false

        if showCircles
          $.each character.getCircles(), (i, circle) ->
            return if set

            dx = point.x - circle.x
            dy = point.y - circle.y
            dist = circle.radius

            if dx * dx + dy * dy < dist * dist
              activeType = "circles"
              activeComponent = circle.circle
              set = true

        $.each active, (key, value) ->
          active[key] = undefined

        active[activeType] = activeComponent

  nextFrame = ->
    active["circles"] = undefined
    currentFrame++

    if currentFrame == animation.frameCount()
      currentFrame = 0
    else if currentFrame >= frames.length
      # Copy first frame of hit circles
      circlesCopy = frames[0].circles.slice(0).map (circle) ->
        return {
          x: circle.x
          y: circle.y
          radius: circle.radius
        }

      frames.push({ circles: circlesCopy })

  previousFrame = -> currentFrame-- if currentFrame > 0

  generateComponentMethods = (component, creator) ->
    getter = -> frames[currentFrame][component]

    return {
      add: (param) ->
        active[component] = creator()
        if component == "circles"
          getter().push(active[component])
        else
          frames[currentFrame][component][param] = active[component]

      grow: (delta) ->
        c = active[component]
        c.radius = (delta + c.radius).clamp(1, 1000) if c

      next: ->
        index = getter().indexOf(active[component])
        index = (index + 1) % getter().length
        active[component] = getter()[index]

      prev: ->
        index = getter().indexOf(active[component])
        index = Math.mod(index - 1, getter().length)
        active[component] = getter()[index]

      remove: -> getter().remove(active[component])
    }

  Circles = generateComponentMethods "circles", ->
    return {
      x: 0
      y: 0
      radius: 50
    }

  move = (x, y) ->
    $.each active, (name, component) ->
      if component
        component.x += x
        component.y += y

  keyEvents =
    "+": -> Circles.grow(1)
    "-": -> Circles.grow(-1)
    "up": -> move(0, -1)
    "down": -> move(0, 1)
    "left": -> move(-1, 0)
    "right": -> move(1, 0)
    "shift+left": -> move(-10, 0)
    "shift+right": -> move(10, 0)
    "shift+up": -> move(0, -10)
    "shift+down": -> move(0, 10)
    "shift++": -> Circles.grow(10)
    "shift+-": -> Circles.grow(-10)
    "shift+tab": -> Circles.prev()
    "tab": -> Circles.next()
    "d del": -> Circles.remove()

  $.each keyEvents, (key, fn) ->
    $(document).bind 'keydown', key, ->
      fn()
      return false

  Button = (text, callback) ->
    $("<input type='button' />").attr("value", text).mousedown(callback)

  increase = Button("Increase", -> Circles.grow(1))
  decrease = Button("Decrease", -> Circles.grow(-1))
  increase_plus = Button("Increase+", -> Circles.grow(5))
  decrease_plus = Button("Decrease+", -> Circles.grow(-5))
  add_circle = Button("Add Circle", -> Circles.add())
  remove_circle = Button("Remove Circle", -> Circles.remove())
  prev_frame = Button("Previous Frame", -> previousFrame())
  next_frame = Button("Next Frame", -> nextFrame())
  toggle_show = Button("Toggle Show Circles", -> showCircles = !showCircles)

  $('.actions').append(increase, decrease, increase_plus, decrease_plus, add_circle, remove_circle, prev_frame, next_frame, toggle_show)

  $("#export").click ->
    $("#output").text(JSON.stringify(
      animation: animationJSON,
      frames: frames
    , null, 2))
