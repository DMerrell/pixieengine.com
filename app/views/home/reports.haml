%style
  :sass
    .chart
      height: 400px
    td, th
      padding: 0.25em 1em
    td:first-child
      font-weight: bold
      text-align: right
    th
      font-weight: bold
      text-align: center

%h2 Cohort Analysis

:ruby
  data = User.cohort_analysis.group_by {|i| i["first_action"] }
  range = (0..12)

%table
  %thead
    %th
    - range.each do |n|
      %th= n
  %tbody
    - data.each do |key, datum|
      %tr
        - start_date = Date.parse(key)
        - entries = {} # Side effects, o0 wut!
        - total = datum.inject(0) {|memo, cell| entries[Date.parse(cell["last_action"])]; memo + cell["count"].to_i}
        - remainder = 0
        %th= start_date
        %th= total
        - range.each do |i|
          - cell = entries[start_date >> i]
          %td
            - total_remaining = total - remainder # TODO sum this and all remaining month counts
            - remainder += cell["count"].to_i if cell
            = number_to_percentage(100 * total_remaining / total, :precision => 1) # TODO percentage format

%h2 Registrations

.chart.registrations

%h2 Colors

%canvas.color(width=480 height=480)

- content_for :javascript do
  = javascript_include_tag "highcharts"

  :coffeescript
    registrations_per_week = #{User.registrations_per_week.to_json}

    data = registrations_per_week.map (datum) ->
      [new Date(datum.date).getTime(), parseInt(datum.count)]

    new Highcharts.Chart
      chart:
        renderTo: $(".chart.registrations").get(0)
      legend:
        enabled: false
      plotOptions:
        series:
          marker:
            enabled: false
      series: [
        data: data
        name: "Registrations"
      ]
      title:
        text: "Registrations Per Week"
      xAxis:
        type: 'datetime'
        dateTimeLabelFormats:
          day: '%b %e'
          week: '%b %e'
          month: '%b'
          year: '%Y'
        title:
          text: "Week"
      yAxis:
        title:
          text: "Registrations"

    colorCanvas = $("canvas.color").pixieCanvas()

    colorData = #{User.select("favorite_color").where("favorite_color IS NOT NULL").map(&:favorite_color).to_json}

    colorCanvas.fill("white")

    colorCanvas.withTransform Matrix.translation(240, 240), ->
      colorData.each (color) ->
        try
          color = Color(color)

          angle = color.hue() * Math.TAU / 360
          saturation = color.saturation()

          position = Point.fromAngle(angle).scale(235 * saturation)

          colorCanvas.drawCircle
            position: position
            radius: 4
            color: color

        catch error
          console.warn(error)
