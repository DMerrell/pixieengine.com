%style
  :sass
    td, th
      padding: 0.25em 1em
    td:first-child
      font-weight: bold
      text-align: right
    th
      font-weight: bold
      text-align: center

    .chart
      height: 400px

:ruby
  funnel = ["land", "register"]

  results = Hash.new(0)
  Event.select("name, count(DISTINCT(session_id)) as count").group("name").where(:name => funnel, :user_id => nil).each do |result|
    results[result.name] = result.count
  end

- Experiment.all.each do |experiment|
  :ruby
    results = {}

    Event.find_by_sql(<<-eos
      SELECT events.name, treatments.control, COUNT(DISTINCT(events.session_id)) as count
      FROM events
        INNER JOIN treatments
          ON events.session_id = treatments.session_id
        INNER JOIN experiments
          ON treatments.experiment_id = experiments.id
      WHERE events.name IN ('land', 'register', 'subscribe')
        AND events.user_id IS NULL
        AND experiments.id = #{experiment.id}
      GROUP BY treatments.control, events.name
    eos
    ).each do |result|
      results[result.name] ||= {}
      results[result.name][result.control] = result.count
    end

  :ruby
    if results[funnel.last]['t'].to_i > results[funnel.last]['f'].to_i
      control_color = 'rgba(0, 255, 0, 0.3)'
      experiment_color = 'rgba(255, 0, 0, 0.3)'
    else
      control_color = 'rgba(255, 0, 0, 0.3)'
      experiment_color = 'rgba(0, 255, 0, 0.3)'
    end

  %h3= experiment.name
  %table
    %thead
      %tr
        %th
        - funnel.each do |name|
          %th= name
    %tbody
      - ["t", "f"].each do |control|
        %tr(style="background-color:#{control == "t" ? control_color : experiment_color};")
          - funnel.each_with_index do |name, i|
            - if i == 0
              %td= control == "t" ? "control" : "experiment"
              - prev_total = results[funnel[i]][control].to_f
            - else
              - prev_total = results[funnel[i-1]][control].to_f

            - current_total = results[name][control].to_f
            %td
              = "%1.2f%" % (current_total / prev_total * 100)
              %br
              = current_total.to_i

%h2 Registrations

.chart.registrations

- content_for :javascript do
  = javascript_include_tag "highcharts"

  :coffeescript
    registrations_per_day = #{User.registrations_per_day.to_json}

    window.data = registrations_per_day.map (datum) ->
      [new Date(datum.user.date).getTime(), datum.user.count]

    new Highcharts.Chart
      chart:
        renderTo: $(".chart.registrations").get(0)
      legend:
        enabled: false
      plotOptions:
        series:
          marker:
            enabled: false
      series: [
        data: data
      ]
      title:
        text: "Registrations Per Day"
      xAxis:
        type: 'datetime'
        dateTimeLabelFormats:
          day: '%b %e'
          week: '%b %e'
          month: '%b'
          year: '%Y'
        title:
          text: "Day"
      yAxis:
        title:
          text: "Registrations"
