= stylesheet_link_tag "branded"

%style
  :sass
    @import util

    .collection
      ul
        padding-top: 0.5em

    .comments_area
      +module

      margin-top: 1em
      max-height: 600px
      padding: 1em 2em
      overflow: auto
      width: 400px

      textarea
        height: 75px

    .sprite_container
      display: inline-block
      margin-right: 5em
      vertical-align: top

    .static-picture_edit, .static-status_online, .static-photo_add, .static-table_edit, .static-cross
      display: inline-block
      vertical-align: bottom

    #tag
      width: 200px

- @title = sprite.display_name
- @meta_desc = sprite.meta_desc
- @has_reg_popup = true

.sprite_container
  %h1= sprite.display_name

  = link_to image_tag(sprite.image.url, :alt => sprite.display_name), load_sprite_path(sprite)

  %p= sprite.description

  .clear
  %p= author_link(sprite)

.sprite_container
  -if sprite.parent
    %h1
      Remixed from
      = sprite.parent.display_name

    = link_to image_tag(sprite.parent.image.url, :alt => sprite.parent.display_name), load_sprite_path(sprite.parent)

    %p= sprite.parent.description

    .clear
    %p= author_link(sprite.parent)

%ul.actions
  %li
    %a.button(href="#{load_sprite_path(sprite)}")
      .static-picture_edit
      Load in Editor
  - if current_user
    %li.avatar
      %a.button(href="#" data-sprite_id="#{sprite.id}")
        .static-status_online
        Set as Avatar
    %li.listMenu.menu.collection
      %a.button(href="#" data-sprite_id="#{sprite.id}")
        .static-photo_add
        Add to Collection
      %ul.round{:style => "display: none;"}
        - current_user.collections.each do |collection|
          %li{ "data-collection_id" => collection.id }
            = check_box_tag "collection", "1", collection.sprites.include?(sprite), :id => nil, :name => nil
            = collection.title
        %li{ "data-collection_id" => "new" } New Collection
  - if owner_or_admin?
    %li
      %a.button(href="#{edit_sprite_path(sprite)}")
        .static-table_edit
        Edit Details
  - if owner_or_admin?
    %li
      %a.button(href="#{sprite_path(sprite)}" data-method="delete")
        .static-cross
        Delete

%h3 Tags
.tags
  - sprite.tag_list.each do |tag|
    = sprite_tag_link(sprite, tag)

  - sprite.source_list.each do |source|
    = sprite_tag_link(sprite, source)

  - sprite.dimension_list.each do |dimension|
    = sprite_tag_link(sprite, dimension)

  = form_tag add_tag_sprite_path, {"data-sprite_id" => sprite.id} do
    = text_field_tag :tag, nil, :placeholder => "Tag name"
    = submit_tag "Add"

= display_comments sprite

#newCollectionModal.modalElement
  = render :partial => "collections/form"

:javascript
  $(function() {
    function ajaxifyForm(selector) {
      var form = $(selector);

      form.ajaxForm({
        dataType: 'json',
        beforeSerialize: function($form) {
          $form.find("input[name=sprite_id]").val(spriteId);
        },
        success: function(data) {
          if(data.status == "ok") {
            $.modal.close();
            newCollectionCallback(data.title, data.id);
          } else {
            var errorExplanation = form.find(".errorExplanation");
            if(errorExplanation.length == 0) {
              errorExplanation = $("<div class='errorExplanation' />");
            }

            var errorList = $("<ul />");
            $.each(data.errors, function(i, error) {
              errorList.append($("<li />").text(error));
            });

            errorExplanation.html('');
            errorExplanation.append(errorList);

            form.prepend(errorExplanation);
          }
        }
      });
    }

    function newCollectionCallback(title, id) {
      $(".listMenu ul li:last-child").each(function() {
        var parentSpriteId = $(this).parent().prev().attr("data-sprite_id");
        var newElem = $("<li />").attr("data-collection_id", id);
        newElem.text(title);

        if(parentSpriteId == spriteId) {
          newElem.prepend("<input type='checkbox', value='1' checked='checked' />");
        } else {
          newElem.prepend("<input type='checkbox', value='1' />");
        }

        $(this).before(newElem);
      });
    }

    ajaxifyForm("#new_collection");

    var displayedMenu;
    var spriteId;

    $(".listMenu .button").click(function() {
      spriteId = $(this).attr("data-sprite_id");
      displayedMenu = $(this).next("ul");
      displayedMenu.show();

      setTimeout(function() {
        $(document).one('click', function() {
          displayedMenu.fadeOut();
        });
      }, 0);

      return false;
    });

    $(".menu li").live("click", function(event) {
      var collectionId = $(this).attr("data-collection_id");
      var checkbox = $(this).children("input");
      var boxClick = false;

      if($(event.target).is("input")) {
        boxClick = true;
      }

      if(collectionId == "new") {
        $("#newCollectionModal").modal();
      } else {
        var checked = !(checkbox.attr("checked") ^ boxClick);
        checkbox.attr("checked", checked);

        if(checked) {
          $.post("/collections/" + collectionId + "/add", {
            sprite_id: spriteId
          }, "json");
        } else {
          $.post("/collections/" + collectionId + "/remove", {
            sprite_id: spriteId
          }, "json");
        }
      }
    });

    $(".avatar a").live("click", function(event) {
      notify("Saving...");

      var spriteId = $(this).attr("data-sprite_id");

      $.post("/people/#{(current_user) ? current_user.id : 0}/set_avatar",
        { sprite_id: spriteId },
        function(data) { notify("Avatar successfully changed."); }
      );
    });
  });
